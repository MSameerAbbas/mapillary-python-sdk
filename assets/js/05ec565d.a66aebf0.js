"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8482],{3905:function(e,t,r){r.d(t,{Zo:function(){return m},kt:function(){return d}});var n=r(7294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},m=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,o=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=c(r),d=l,f=u["".concat(p,".").concat(d)]||u[d]||s[d]||o;return r?n.createElement(f,a(a({ref:t},m),{},{components:r})):n.createElement(f,a({ref:t},m))}));function d(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=r.length,a=new Array(o);a[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:l,a[1]=i;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3601:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return m},default:function(){return u}});var n=r(7462),l=r(3366),o=(r(7294),r(3905)),a=["components"],i={"sidebar position":2},p=void 0,c={unversionedId:"mapillary.controller/mapillary.controller.detection",id:"mapillary.controller/mapillary.controller.detection",isDocsHomePage:!1,title:"mapillary.controller.detection",description:"mapillary.controllers.detection",source:"@site/docs/mapillary.controller/mapillary.controller.detection.md",sourceDirName:"mapillary.controller",slug:"/mapillary.controller/mapillary.controller.detection",permalink:"/mapillary-python-sdk/docs/mapillary.controller/mapillary.controller.detection",editUrl:"https://github.com/mapillary/mapillary-python-sdk/tree/main/docs/docs/mapillary.controller/mapillary.controller.detection.md",tags:[],version:"current",frontMatter:{"sidebar position":2},sidebar:"tutorialSidebar",previous:{title:"mapillary.config",permalink:"/mapillary-python-sdk/docs/mapillary.config/mapillary.config"},next:{title:"mapillary.controller.feature",permalink:"/mapillary-python-sdk/docs/mapillary.controller/mapillary.controller.feature"}},m=[{value:"mapillary.controllers.detection",id:"mapillarycontrollersdetection",children:[]},{value:"mapillary.controller.detection.get_image_detections_controller(image_id: Unionstr, int, fields: Optionallist = None)",id:"mapillarycontrollerdetectionget_image_detections_controllerimage_id-unionstr-int-fields-optionallist--none",children:[]},{value:"mapillary.controller.detection.get_map_feature_detections_controller(map_feature_id: Unionstr, int, fields: Optionallist = None)",id:"mapillarycontrollerdetectionget_map_feature_detections_controllermap_feature_id-unionstr-int-fields-optionallist--none",children:[]}],s={toc:m};function u(e){var t=e.components,r=(0,l.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"mapillarycontrollersdetection"},"mapillary.controllers.detection"),(0,o.kt)("p",null,"This module implements the detection based business logic functionalities of the Mapillary\nPython SDK."),(0,o.kt)("p",null,"For more information, please check out ",(0,o.kt)("a",{parentName:"p",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Copyright: (c) 2021 Facebook")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"License: MIT LICENSE")),(0,o.kt)("h3",{id:"mapillarycontrollerdetectionget_image_detections_controllerimage_id-unionstr-int-fields-optionallist--none"},"mapillary.controller.detection.get_image_detections_controller(image_id: Union","[str, int]",", fields: Optional","[list]"," = None)"),(0,o.kt)("p",null,"Get image detections with given (image) key"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Parameters")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"image_id")," (",(0,o.kt)("em",{parentName:"li"},"str"),") \u2013 The image id")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"* **fields** (*list*) \u2013 The fields possible for the detection endpoint. Please see\n[https://www.mapillary.com/developer/api-documentation](https://www.mapillary.com/developer/api-documentation) for more information\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",{parentName:"li"},"  GeoJSON"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Return type")),(0,o.kt)("p",{parentName:"li"},"  dict"))),(0,o.kt)("h3",{id:"mapillarycontrollerdetectionget_map_feature_detections_controllermap_feature_id-unionstr-int-fields-optionallist--none"},"mapillary.controller.detection.get_map_feature_detections_controller(map_feature_id: Union","[str, int]",", fields: Optional","[list]"," = None)"),(0,o.kt)("p",null,"Get image detections with given (map feature) key"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Parameters")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"map_feature_id")," (",(0,o.kt)("em",{parentName:"li"},"str"),") \u2013 The map feature id")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"* **fields** (*list*) \u2013 The fields possible for the detection endpoint. Please see\n[https://www.mapillary.com/developer/api-documentation](https://www.mapillary.com/developer/api-documentation) for more information\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Returns")),(0,o.kt)("p",{parentName:"li"},"  GeoJSON"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Return type")),(0,o.kt)("p",{parentName:"li"},"  dict"))))}u.isMDXComponent=!0}}]);
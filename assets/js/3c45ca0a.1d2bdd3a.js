"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1559],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return u}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=n.createContext({}),o=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=o(e.components);return n.createElement(m.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},N=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),N=o(a),u=r,c=N["".concat(m,".").concat(u)]||N[u]||k[u]||i;return a?n.createElement(c,l(l({ref:t},s),{},{components:a})):n.createElement(c,l({ref:t},s))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=N;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var o=2;o<i;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}N.displayName="MDXCreateElement"},7500:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return p},contentTitle:function(){return m},metadata:function(){return o},toc:function(){return s},default:function(){return N}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=["components"],p={sidebar_position:4},m="mapillary package",o={unversionedId:"sdk/mapillary",id:"sdk/mapillary",isDocsHomePage:!1,title:"mapillary package",description:"## Subpackages",source:"@site/docs/sdk/mapillary.md",sourceDirName:"sdk",slug:"/sdk/mapillary",permalink:"/docs/sdk/mapillary",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/sdk/mapillary.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"mapillary.controller package",permalink:"/docs/sdk/mapillary.controller"},next:{title:"mapillary.models.api package",permalink:"/docs/sdk/mapillary.models.api"}},s=[{value:"Subpackages",id:"subpackages",children:[]}],k={toc:s};function N(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"mapillary-package"},"mapillary package"),(0,i.kt)("h2",{id:"subpackages"},"Subpackages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"mapillary.config package"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Subpackages")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  * mapillary.config.api package\n\n\n      * Submodules\n\n\n      * mapillary.config.api.entities module\n\n\n      * mapillary.config.api.general module\n\n\n      * mapillary.config.api.vector_tiles module\n\n\n      * Module contents\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Module contents")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  * mapillary.config.__init__\n\n\n      * Over Authentication\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"mapillary.controller package"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Submodules")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"mapillary.controller.detection module")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  * mapillary.controllers.detection\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"mapillary.controller.feature module")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  * mapillary.controllers.feature\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"mapillary.controller.image module")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  * mapillary.controllers.image\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"mapillary.controller.save module")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  * mapillary.controllers.save\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Module contents")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  * mapillary.controller.__init__\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"mapillary.models package"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Subpackages")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  * mapillary.models.api package\n\n\n      * Submodules\n\n\n      * mapillary.models.api.entities module\n\n\n      * mapillary.models.api.vector_tiles module\n\n\n      * Module contents\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Submodules")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"mapillary.models.client module")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  * mapillary.models.client\n\n\n      * Over Authentication\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"mapillary.models.exceptions module")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  * mapillary.models.exceptions\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"mapillary.models.geojson module")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  * mapillary.models.geojson\n")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Module contents")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  * mapillary.models.__init__\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"mapillary.utils package"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"* Submodules\n\n\n* mapillary.utils.auth module\n\n\n    * mapillary.utils.auth\n\n\n* mapillary.utils.extract module\n\n\n    * mapillary.utils.extract\n\n\n* mapillary.utils.filter module\n\n\n    * mapillary.utils.filter\n\n\n* mapillary.utils.format module\n\n\n    * mapillary.utils.format\n\n\n* mapillary.utils.time module\n\n\n    * mapillary.utils.time\n\n\n* mapillary.utils.verify module\n\n\n    * mapillary.controller.rules.verify\n\n\n* Module contents\n\n\n    * mapillary.utils.__init__\n")),(0,i.kt)("h2",{parentName:"li",id:"submodules"},"Submodules"),(0,i.kt)("h2",{parentName:"li",id:"mapillaryinterface-module"},"mapillary.interface module"),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterface"},"mapillary.interface"),(0,i.kt)("p",{parentName:"li"},"This module implements the basic functionalities of the Mapillary Python SDK, a Python\nimplementation of the Mapillary API v4. For more information, please check out\n",(0,i.kt)("a",{parentName:"p",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Copyright: (c) 2021 Facebook")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"License: MIT LICENSE"),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfacefeature_from_keykey-str-fields-list--"},"mapillary.interface.feature_from_key(key: str, fields: list = [])"),(0,i.kt)("p",{parentName:"li"},"Gets a map feature for the given key argument")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"key")," (",(0,i.kt)("em",{parentName:"li"},"int"),") \u2013 The map feature ID to which will be used to get the feature")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"fields")," (",(0,i.kt)("em",{parentName:"p"},"list"),") \u2013 The fields to include. The field \u2018geometry\u2019 will always be included\nso you do not need to specify it, or if you leave it off, it will still be returned."),(0,i.kt)("p",{parentName:"li"},"Fields:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"")))),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"first_seen_at - timestamp, timestamp of the least recent\ndetection contributing to this feature")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"last_seen_at - timestamp, timestamp of the most recent\ndetection contributing to this feature")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"object_value - string, what kind of map feature it is")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"object_type - string, either a traffic_sign or point")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"geometry - GeoJSON Point geometry")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"images - list of IDs, which images this map feature was derived\nfrom"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"\nRefer to [https://www.mapillary.com/developer/api-documentation/#map-feature](https://www.mapillary.com/developer/api-documentation/#map-feature) for more details\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  A GeoJSON string that represents the queried feature")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"str\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> mly.interface.set_access_token('MLY|XXX')\n>>> mly.interface.feature_from_key(\n...     key='VALID_MAP_FEATURE_KEY',\n...     fields=['object_value']\n... )\n")),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfaceget_detections_with_image_idimage_id-int-fields-list--none"},"mapillary.interface.get_detections_with_image_id(image_id: int, fields: list = None)"),(0,i.kt)("p",{parentName:"li"},"Extracting all the detections within an image using an image key")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"image_id")," (",(0,i.kt)("em",{parentName:"li"},"int"),") \u2013 The image key as the argument")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"fields")," (",(0,i.kt)("em",{parentName:"li"},"list"),") \u2013 The fields possible for the detection endpoint. Please see\n",(0,i.kt)("a",{parentName:"li",href:"https://www.mapillary.com/developer/api-documentation"},"https://www.mapillary.com/developer/api-documentation")," for more information"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  The GeoJSON in response")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"dict\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'>>> import mapillary as mly\n>>> mly.interface.set_access_token(\'CLIENT_TOKEN_HERE\')\n>>> mly.interface.get_detections_with_image_id(image_id=1933525276802129)\n... {"data":[{"created_at":"2021-05-20T17:49:01+0000","geometry":\n... "GjUKBm1weS1vchIVEgIAABgDIg0JhiekKBoqAABKKQAPGgR0eXBlIgkKB3BvbHlnb24ogCB4AQ==","image"\n... :{"geometry":{"type":"Point","coordinates":[-97.743279722222,30.270651388889]},"id":\n... "1933525276802129"},"value":"regulatory--no-parking--g2","id":"1942105415944115"},\n... {"created_at":"2021-05-20T18:40:21+0000","geometry":\n... "GjYKBm1weS1vchIWEgIAABgDIg4J7DjqHxpWAADiAVUADxoEdHlwZSIJCgdwb2x5Z29uKIAgeAE=",\n... "image":{"geometry":{"type":"Point","coordinates":[-97.743279722222,30.270651388889]},\n... "id":"1933525276802129"},"value":"information--parking--g1","id":"1942144785940178"},\n... , ...}\n')),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfaceget_detections_with_map_feature_idmap_feature_id-str-fields-list--none"},"mapillary.interface.get_detections_with_map_feature_id(map_feature_id: str, fields: list = None)"),(0,i.kt)("p",{parentName:"li"},"Extracting all detections made for a map feature key")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"map_feature_id")," (",(0,i.kt)("em",{parentName:"li"},"int"),") \u2013 A map feature key as the argument")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"fields")," (",(0,i.kt)("em",{parentName:"li"},"list"),") \u2013 The fields possible for the detection endpoint. Please see\n",(0,i.kt)("a",{parentName:"li",href:"https://www.mapillary.com/developer/api-documentation"},"https://www.mapillary.com/developer/api-documentation")," for more information"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  The GeoJSON in response")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"GeoJSON\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> mly.interface.set_access_token('MLY|XXX')\n>>> mly.interface.get_detections_with_map_feature_id(map_feature_id='1933525276802129')\n...     File \"/home/saif/MLH/mapillary-python-sdk/mapillary/controller/rules/verify.py\",\n...         line 227, in valid_id\n...             raise InvalidOptionError(\n... mly.models.exceptions.InvalidOptionError: InvalidOptionError: Given id value,\n...     \"Id: 1933525276802129, image: False\" while possible id options, [Id is image_id\n...     AND image is True, key is map_feature_id ANDimage is False]\n")),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfaceget_image_close_tolatitude--1221504711-longitude37485073-kwargs"},"mapillary.interface.get_image_close_to(latitude=- 122.1504711, longitude=37.485073, ","*","*","kwargs)"),(0,i.kt)("p",{parentName:"li"},"Function that takes a longitude, latitude as argument and outputs the near images. This\nmakes an API call with the token set in set_access_token and returns a JSON object.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"longitude")," (",(0,i.kt)("em",{parentName:"li"},"float",(0,i.kt)("strong",{parentName:"em"}," or "),"double"),") \u2013 The longitude")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"latitude")," (",(0,i.kt)("em",{parentName:"li"},"float",(0,i.kt)("strong",{parentName:"em"}," or "),"double"),") \u2013 The latitude")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"kwargs.fields")," (",(0,i.kt)("em",{parentName:"li"},"list"),") \u2013 A list of options, either as ","[\u2018all\u2019]",", or a list of fields.\nSee ",(0,i.kt)("a",{parentName:"li",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/"),", under \u2018Fields\u2019 for more insight.")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"kwargs.zoom")," (",(0,i.kt)("em",{parentName:"li"},"int"),") \u2013 The zoom level of the tiles to obtain, defaults to 14")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"kwargs.radius")," (",(0,i.kt)("em",{parentName:"li"},"float",(0,i.kt)("strong",{parentName:"em"}," or "),"int",(0,i.kt)("strong",{parentName:"em"}," or "),"double"),") \u2013 The radius of the images obtained from a center center")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"kwargs.image_type")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The tile image_type to be obtained, either as \u2018flat\u2019, \u2018pano\u2019\n(panoramic), or \u2018both\u2019. See ",(0,i.kt)("a",{parentName:"li",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/")," under\n\u2018image_type Tiles\u2019 for more information")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"kwargs.min_captured_at")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The min date. Format from \u2018YYYY\u2019, to \u2018YYYY-MM-DDTHH:MM:SS\u2019")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"kwargs.max_captured_at")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The max date. Format from \u2018YYYY\u2019, to \u2018YYYY-MM-DDTHH:MM:SS\u2019")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"kwargs.org_id")," (",(0,i.kt)("em",{parentName:"li"},"int"),") \u2013 The organization id, ID of the organization this image (or sets of\nimages) belong to. It can be absent. Thus, default is -1 (None)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  GeoJSON")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"dict\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> mly.interface.set_access_token('CLIENT_TOKEN_HERE')\n>>> mly.interface.get_image_close_to(longitude=31, latitude=30)\n... {'type': 'FeatureCollection', 'features': [{'type': 'Feature',\n'geometry': {'type': 'Point', 'coordinates': [30.9912246465683,\n29.99794091267283]}, 'properties': {'captured_at': 1621008070596,\n'compass_angle': 322.56726074219, 'id': 499412381300321, 'is_pano':\nFalse, 'sequence_id': '94afmyyhq85xd9bi8p44ve'}} ...\n")),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfaceget_image_looking_atlooker-dict-at-dict-filters-dict"},"mapillary.interface.get_image_looking_at(looker: dict, at: dict, ","*","*","filters: dict)"),(0,i.kt)("p",{parentName:"li"},"Function that takes two sets of latitude and longitude, where the 2nd set is the\n\u201clooking at\u201d location from 1st set\u2019s perspective argument and outputs the near images. This\nmakes an API call with the token set in set_access_token and returns a JSON object.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"looker")," (",(0,i.kt)("em",{parentName:"p"},"dict"),") \u2013 The coordinate sets from where a certain point is being looked at"),(0,i.kt)("p",{parentName:"li"},"Format:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> {\n...     'lng': 'longitude',\n...     'lat': 'latitude'\n... }\n")))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"at")," (",(0,i.kt)("em",{parentName:"p"},"dict"),") \u2013 The coordinate sets to where a certain point is being looked at"),(0,i.kt)("p",{parentName:"li"},"Format:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> {\n...     'lng': 'longitude',\n...     'lat': 'latitude'\n... }\n")))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.min_captured_at")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The minimum date to filter till")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.max_captured_at")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The maximum date to filter upto")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.radius")," (",(0,i.kt)("em",{parentName:"li"},"float"),") \u2013 The radius that the geometry points will lie in")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.image_type")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 Either \u2018pano\u2019, \u2018flat\u2019 or \u2018all\u2019")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.organization_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The organization to retrieve the data for"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  The GeoJSON response containing relevant features")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"GeoJSON\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> mly.interface.set_access_token('MLY|XXX')\n>>> data = mly.interface.get_image_looking_at(\n...        looker={\n...             'lng': 12.954940544167,\n...             'lat': 48.0537894275,\n...         },\n...         at={\n...             'lng': 12.955075073889,\n...             'lat': 48.053805939722,\n...         },\n...         radius = 5000,\n...     )\n>>> data\n... {'type': 'FeatureCollection', 'features': [{'type': 'Feature', 'geometry': {'type':\n... 'Point', 'coordinates': [12.954479455947876, 48.05091893670834]}, 'properties':\n... {'captured_at': 1612606959408, 'compass_angle': 21.201110839844, 'id': 1199705400459580,\n... 'is_pano': False, 'sequence_id': 'qrrqtke4a6vtygyc7w8rzc'}}, ... }\n")),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfaceimage_from_keykey-str-fields-list--none"},"mapillary.interface.image_from_key(key: str, fields: list = None)"),(0,i.kt)("p",{parentName:"li"},"Gets an image for the given key argument")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"key")," (",(0,i.kt)("em",{parentName:"li"},"int"),") \u2013 The image unique key which will be used for image retrieval")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"fields")," (",(0,i.kt)("em",{parentName:"p"},"list"),") \u2013 The fields to include. The field \u2018geometry\u2019 will always be included\nso you do not need to specify it, or if you leave it off, it will still be returned."),(0,i.kt)("p",{parentName:"li"},"Fields,"))),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  1. altitude - float, original altitude from Exif\n\n\n  2. atomic_scale - float, scale of the SfM reconstruction around the image\n\n\n  3. camera_parameters - array of float, intrinsic camera parameters\n\n\n  4. camera_type - enum, type of camera projection (perspective, fisheye, or\n\n  spherical)\n\n\n  5. captured_at - timestamp, capture time\n\n\n  6. compass_angle - float, original compass angle of the image\n\n\n  7. computed_altitude - float, altitude after running image processing\n\n\n  8. computed_compass_angle - float, compass angle after running image processing\n\n\n  9. computed_geometry - GeoJSON Point, location after running image processing\n\n\n  10. computed_rotation - enum, corrected orientation of the image\n\n\n  11. exif_orientation - enum, orientation of the camera as given by the exif tag\n")),(0,i.kt)("p",{parentName:"li"},"  (see: ",(0,i.kt)("a",{parentName:"p",href:"https://sylvana.net/jpegcrop/exif_orientation.html"},"https://sylvana.net/jpegcrop/exif_orientation.html"),")"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  12. geometry - GeoJSON Point geometry\n\n\n  13. height - int, height of the original image uploaded\n\n\n  14. thumb_256_url - string, URL to the 256px wide thumbnail\n\n\n  15. thumb_1024_url - string, URL to the 1024px wide thumbnail\n\n\n  16. thumb_2048_url - string, URL to the 2048px wide thumbnail\n\n\n  17. merge_cc - int, id of the connected component of images that were aligned\n")),(0,i.kt)("p",{parentName:"li"},"  together"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  18. mesh - { id: string, url: string } - URL to the mesh\n\n\n  19. quality_score - float, how good the image is (experimental)\n\n\n  20. sequence - string, ID of the sequence\n\n\n  21. sfm_cluster - { id: string, url: string } - URL to the point cloud\n\n\n  22. width - int, width of the original image uploaded\n")),(0,i.kt)("p",{parentName:"li"},"  Refer to ",(0,i.kt)("a",{parentName:"p",href:"https://www.mapillary.com/developer/api-documentation/#image"},"https://www.mapillary.com/developer/api-documentation/#image")," for more details")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  A GeoJSON string that represents the queried image")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"str\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> mly.interface.set_access_token('MLY|XXX')\n>>> mly.interface.image_from_key(\n...     key='VALID_IMAGE_KEY',\n...     fields=['captured_at', 'sfm_cluster', 'width']\n... )\n")),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfaceimage_thumbnailimage_id-str-resolution-int--1024"},"mapillary.interface.image_thumbnail(image_id: str, resolution: int = 1024)"),(0,i.kt)("p",{parentName:"li"},"Gets the thumbnails of images from the API")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"image_id")," \u2013 Image key as the argument")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"resolution")," \u2013 Option for the thumbnail size, with available resolutions:\n256, 1024, and 2048"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  A URL for the thumbnail")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"str\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> mly.interface.set_access_token('MLY|XXX')\n>>> mly.interface.image_thumbnail(\n...     image_id='IMAGE_ID_HERE', resolution=1024\n... )\n")),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfaceimages_in_bboxbbox-dict-filters"},"mapillary.interface.images_in_bbox(bbox: dict, ","*","*","filters)"),(0,i.kt)("p",{parentName:"li"},"Gets a complete list of images with custom filter within a BBox")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"bbox")," (",(0,i.kt)("em",{parentName:"p"},"dict"),") \u2013 Bounding box coordinates"),(0,i.kt)("p",{parentName:"li"},"Format:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> {\n...     'west': 'BOUNDARY_FROM_WEST',\n...     'south': 'BOUNDARY_FROM_SOUTH',\n...     'east': 'BOUNDARY_FROM_EAST',\n...     'north': 'BOUNDARY_FROM_NORTH'\n... }\n")))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"filters")," (",(0,i.kt)("em",{parentName:"p"},"dict"),") \u2013 Different filters that may be applied to the output"),(0,i.kt)("p",{parentName:"li"},"Example filters:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"")))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"max_captured_at"),(0,i.kt)("li",{parentName:"ul"},"min_captured_at"),(0,i.kt)("li",{parentName:"ul"},"image_type: pano, flat, or all"),(0,i.kt)("li",{parentName:"ul"},"compass_angle"),(0,i.kt)("li",{parentName:"ul"},"sequence_id"),(0,i.kt)("li",{parentName:"ul"},"organization_id",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},""))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  Output is a GeoJSON string that represents all the within a bbox after passing given\nfilters")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"str\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> mly.interface.set_access_token('MLY|XXX')\n>>> mly.interface.images_in_bbox(\n...     bbox={\n...         'west': 'BOUNDARY_FROM_WEST',\n...         'south': 'BOUNDARY_FROM_SOUTH',\n...         'east': 'BOUNDARY_FROM_EAST',\n...         'north': 'BOUNDARY_FROM_NORTH'\n...     },\n...     max_captured_at='YYYY-MM-DD HH:MM:SS',\n...     min_captured_at='YYYY-MM-DD HH:MM:SS',\n...     image_type='pano',\n...     compass_angle=(0, 360),\n...     sequence_id='SEQUENCE_ID',\n...     organization_id='ORG_ID'\n... )\n")),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfaceimages_in_geojsongeojson-dict-filters-dict"},"mapillary.interface.images_in_geojson(geojson: dict, ","*","*","filters: dict)"),(0,i.kt)("p",{parentName:"li"},"Extracts all images within a shape")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"geojson")," (",(0,i.kt)("em",{parentName:"li"},"dict"),") \u2013 A geojson as the shape acting as the query extent")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters")," (",(0,i.kt)("em",{parentName:"li"},"dict",(0,i.kt)("strong",{parentName:"em"}," ("),"kwargs**)"),") \u2013 Different filters that may be applied to the output, defaults to {}")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.max_captured_at")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The max date. Format from \u2018YYYY\u2019, to \u2018YYYY-MM-DDTHH:MM:SS\u2019")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.min_captured_at")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The min date. Format from \u2018YYYY\u2019, to \u2018YYYY-MM-DDTHH:MM:SS\u2019")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.image_type")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The tile image_type to be obtained, either as \u2018flat\u2019, \u2018pano\u2019\n(panoramic), or \u2018all\u2019. See ",(0,i.kt)("a",{parentName:"li",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/")," under\n\u2018image_type Tiles\u2019 for more information")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.compass_angle")," (",(0,i.kt)("em",{parentName:"li"},"int"),") \u2013 The compass angle of the image")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.sequence_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 ID of the sequence this image belongs to")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.organization_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 ID of the organization this image belongs to. It can be absent"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  A GeoJSON object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"mapillary.models.geojson.GeoJSON\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> from mapillary.models.geojson import GeoJSON\n>>> import json\n>>> mly.interface.set_access_token('MLY|YYY')\n>>> data = mly.interface.images_in_geojson(json.load(open('my_geojson.geojson', mode='r')))\n>>> open('output_geojson.geojson', mode='w').write(data.encode())\n")),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfaceimages_in_shapeshape-filters-dict"},"mapillary.interface.images_in_shape(shape, ","*","*","filters: dict)"),(0,i.kt)("p",{parentName:"li"},"Extracts all images within a shape or polygon."),(0,i.kt)("p",{parentName:"li"},"Format:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'>>> {\n...    "type": "FeatureCollection",\n...     "features": [\n...        {\n...             "type": "Feature",\n...             "properties": {},\n...             "geometry": {\n...                 "type": "Polygon",\n...                 "coordinates": [\n...                     [\n...                         [\n...                             7.2564697265625,\n...                             43.69716905314008\n...                         ],\n...                         ...\n...                     ]\n...                 ]\n...             }\n...         }\n...     ]\n... }\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"shape")," (",(0,i.kt)("em",{parentName:"li"},"dict"),") \u2013 A shape that describes features, formatted as a geojson")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters")," (",(0,i.kt)("em",{parentName:"li"},"dict",(0,i.kt)("strong",{parentName:"em"}," ("),"kwargs**)"),") \u2013 Different filters that may be applied to the output, defaults to {}")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.max_captured_at")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The max date. Format from \u2018YYYY\u2019, to \u2018YYYY-MM-DDTHH:MM:SS\u2019")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.min_captured_at")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The min date. Format from \u2018YYYY\u2019, to \u2018YYYY-MM-DDTHH:MM:SS\u2019")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.image_type")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The tile image_type to be obtained, either as \u2018flat\u2019, \u2018pano\u2019\n(panoramic), or \u2018all\u2019. See ",(0,i.kt)("a",{parentName:"li",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/")," under\n\u2018image_type Tiles\u2019 for more information")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.compass_angle")," (",(0,i.kt)("em",{parentName:"li"},"int"),") \u2013 The compass angle of the image")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.sequence_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 ID of the sequence this image belongs to")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.organization_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 ID of the organization this image belongs to. It can be absent"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  A GeoJSON object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"mapillary.models.geojson.GeoJSON\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> import json\n>>> mly.interface.set_access_token('MLY|XXX')\n>>> data = mly.interface.images_in_shape(json.load(open('polygon.geojson', mode='r')))\n>>> open('output_geojson.geojson', mode='w').write(data.encode())\n")),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfacemap_feature_points_in_bboxbbox-dict-filter_values-list--none-filters-dict"},"mapillary.interface.map_feature_points_in_bbox(bbox: dict, filter_values: list = None, ","*","*","filters: dict)"),(0,i.kt)("p",{parentName:"li"},"Extracts map feature points within a bounding box (bbox)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"bbox")," (",(0,i.kt)("em",{parentName:"p"},"dict"),") \u2013 bbox coordinates as the argument"),(0,i.kt)("p",{parentName:"li"},"Example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> _ = {\n...     'west': 'BOUNDARY_FROM_WEST',\n...     'south': 'BOUNDARY_FROM_SOUTH',\n...     'east': 'BOUNDARY_FROM_EAST',\n...     'north': 'BOUNDARY_FROM_NORTH'\n... }\n")))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"filter_values")," (",(0,i.kt)("em",{parentName:"p"},"list"),") \u2013 a list of filter values supported by the API"),(0,i.kt)("p",{parentName:"li"},"Example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> _ = ['object--support--utility-pole', 'object--street-light']\n")))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"filters")," (",(0,i.kt)("em",{parentName:"p"},"dict"),") \u2013 kwarg filters to be applied on the resulted GeoJSON"),(0,i.kt)("p",{parentName:"li"},"Chronological filters,"))),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  * *existed_at*: checks if a feature existed after a certain date depending on the time\n\n  it was first seen at.\n\n\n  * *existed_before*: filters out the features that existed after a given date\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  GeoJSON Object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"dict\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> mly.interface.set_access_token('MLY|XXX')\n>>> mly.interface.map_feature_points_in_bbox(\n...     bbox={\n...         'west': 'BOUNDARY_FROM_WEST',\n...         'south': 'BOUNDARY_FROM_SOUTH',\n...         'east': 'BOUNDARY_FROM_EAST',\n...         'north': 'BOUNDARY_FROM_NORTH'\n...     },\n...     filter_values=['object--support--utility-pole', 'object--street-light'],\n...     existed_at='YYYY-MM-DD HH:MM:SS',\n...     existed_before='YYYY-MM-DD HH:MM:SS'\n... )\n")),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfacemap_features_in_geojsongeojson-dict-filters-dict"},"mapillary.interface.map_features_in_geojson(geojson: dict, ","*","*","filters: dict)"),(0,i.kt)("p",{parentName:"li"},"Extracts all map features within a geojson\u2019s boundaries")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"geojson")," (",(0,i.kt)("em",{parentName:"li"},"dict"),") \u2013 A geojson as the shape acting as the query extent")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters")," (",(0,i.kt)("em",{parentName:"li"},"dict",(0,i.kt)("strong",{parentName:"em"}," ("),"kwargs**)"),") \u2013 Different filters that may be applied to the output, defaults to {}")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.zoom")," (",(0,i.kt)("em",{parentName:"li"},"int"),") \u2013 The zoom level of the tiles to obtain, defaults to 14")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.max_captured_at")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The max date. Format from \u2018YYYY\u2019, to \u2018YYYY-MM-DDTHH:MM:SS\u2019")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.min_captured_at")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The min date. Format from \u2018YYYY\u2019, to \u2018YYYY-MM-DDTHH:MM:SS\u2019")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.image_type")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The tile image_type to be obtained, either as \u2018flat\u2019, \u2018pano\u2019\n(panoramic), or \u2018all\u2019. See ",(0,i.kt)("a",{parentName:"li",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/")," under\n\u2018image_type Tiles\u2019 for more information")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.compass_angle")," (",(0,i.kt)("em",{parentName:"li"},"int"),") \u2013 The compass angle of the image")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.sequence_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 ID of the sequence this image belongs to")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.organization_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 ID of the organization this image belongs to. It can be absent"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  A GeoJSON object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"mapillary.models.geojson.GeoJSON\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> import json\n>>> mly.interface.set_access_token('MLY|YYY')\n>>> data = mly.interface.map_features_in_geojson(\n...     json.load(\n...         open('my_geojson.geojson', mode='r')\n...     )\n... )\n>>> open('output_geojson.geojson', mode='w').write(data.encode())\n")),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfacemap_features_in_shapeshape-dict-filters-dict"},"mapillary.interface.map_features_in_shape(shape: dict, ","*","*","filters: dict)"),(0,i.kt)("p",{parentName:"li"},"Extracts all map features within a shape/polygon"),(0,i.kt)("p",{parentName:"li"},"Format:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'>>> _ = {\n...     "type": "FeatureCollection",\n...     "features": [\n...         {\n...             "type": "Feature",\n...             "properties": {},\n...             "geometry": {\n...                 "type": "Polygon",\n...                 "coordinates": [\n...                     [\n...                         [\n...                             7.2564697265625,\n...                             43.69716905314008\n...                         ],\n...                         ...\n...                     ]\n...                 ]\n...             }\n...         }\n...     ]\n... }\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"shape")," (",(0,i.kt)("em",{parentName:"li"},"dict"),") \u2013 A shape that describes features, formatted as a geojson")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters")," (",(0,i.kt)("em",{parentName:"li"},"dict",(0,i.kt)("strong",{parentName:"em"}," ("),"kwargs**)"),") \u2013 Different filters that may be applied to the output, defaults to {}")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.zoom")," (",(0,i.kt)("em",{parentName:"li"},"int"),") \u2013 The zoom level of the tiles to obtain, defaults to 14")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.max_captured_at")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The max date. Format from \u2018YYYY\u2019, to \u2018YYYY-MM-DDTHH:MM:SS\u2019")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.min_captured_at")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The min date. Format from \u2018YYYY\u2019, to \u2018YYYY-MM-DDTHH:MM:SS\u2019")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.image_type")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 The tile image_type to be obtained, either as \u2018flat\u2019, \u2018pano\u2019\n(panoramic), or \u2018all\u2019. See ",(0,i.kt)("a",{parentName:"li",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/")," under\n\u2018image_type Tiles\u2019 for more information")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.compass_angle")," (",(0,i.kt)("em",{parentName:"li"},"int"),") \u2013 The compass angle of the image")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.sequence_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 ID of the sequence this image belongs to")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filters.organization_id")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 ID of the organization this image belongs to. It can be absent"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  A GeoJSON object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"mapillary.models.geojson.GeoJSON\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> import json\n>>> mly.interface.set_access_token('MLY|XXX')\n>>> data = mly.interface.map_features_in_shape(json.load(open('polygon.geojson', mode='r')))\n>>> open('output_geojson.geojson', mode='w').write(data.encode())\n")),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfacesave_locallygeojson_data-str-file_path-str--homesaifmlhmapillary-python-sdksrcmapillary-file_name-str--none-extension-str--geojson"},"mapillary.interface.save_locally(geojson_data: str, file_path: str = '/home/saif/MLH/mapillary-python-sdk/src/mapillary', file_name: str = None, extension: str = 'geojson')"),(0,i.kt)("p",{parentName:"li"},"This function saves the geojson data locally as a file\nwith the given file name, path, and format.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"* **geojson_data** (*str*) \u2013 The GeoJSON data to be stored\n\n\n* **file_path** (*str*) \u2013 The path to save the data to. Defaults to the current directory path\n\n\n* **file_name** (*str*) \u2013 The name of the file to be saved. Defaults to \u2018geojson\u2019\n\n\n* **extension** (*str*) \u2013 The format to save the data as. Defaults to \u2018geojson\u2019\n")),(0,i.kt)("p",{parentName:"li"},"Note:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"Allowed file format values at the moment are,\n    - geojson\n    - CSV\n")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"TODO"),": More file format will be supported further in developemtn\n",(0,i.kt)("em",{parentName:"p"},"TODO"),": Suggestions and help needed at mapillary/mapillary-python-sdk!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  None")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"None\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> mly.interface.set_access_token('MLY|XXX')\n>>> mly.interface.save_locally(\n...     geojson_data=geojson_data,\n...     file_path=os.path.dirname(os.path.realpath(__file__)),\n...     file_name='test_geojson',\n...     extension='geojson'\n... )\n>>> mly.interface.save_locally(\n...     geojson_data=geojson_data,\n...     file_path=os.path.dirname(os.path.realpath(__file__)),\n...     file_name='local_geometries',\n...     extension='csv'\n... )\n")),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfacesequences_in_bboxbbox-dict-filters"},"mapillary.interface.sequences_in_bbox(bbox: dict, ","*","*","filters)"),(0,i.kt)("p",{parentName:"li"},"Gets a complete list of all sequences of images that satisfy given filters\nwithin a BBox.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"bbox")," (",(0,i.kt)("em",{parentName:"p"},"dict"),") \u2013 Bounding box coordinates"),(0,i.kt)("p",{parentName:"li"},"Example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> _ = {\n...     'west': 'BOUNDARY_FROM_WEST',\n...     'south': 'BOUNDARY_FROM_SOUTH',\n...     'east': 'BOUNDARY_FROM_EAST',\n...     'north': 'BOUNDARY_FROM_NORTH'\n... }\n")))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"filters")," (",(0,i.kt)("em",{parentName:"p"},"dict"),") \u2013 Different filters that may be applied to the output"),(0,i.kt)("p",{parentName:"li"},"Example filters:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"")))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"max_captured_at"),(0,i.kt)("li",{parentName:"ul"},"min_captured_at"),(0,i.kt)("li",{parentName:"ul"},"image_type: pano, flat, or all"),(0,i.kt)("li",{parentName:"ul"},"org_id",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},""))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  Output is a GeoJSON string that contains all the filtered sequences within a bbox.\nSequences would NOT be cut at BBox boundary, would select all sequences which are partially\nor entirely in BBox")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"str\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> mly.interface.set_access_token('MLY|XXX')\n>>> mly.interface.sequences_in_bbox(\n...     bbox={\n...         'west': 'BOUNDARY_FROM_WEST',\n...         'south': 'BOUNDARY_FROM_SOUTH',\n...         'east': 'BOUNDARY_FROM_EAST',\n...         'north': 'BOUNDARY_FROM_NORTH'\n...     },\n...     max_captured_at='YYYY-MM-DD HH:MM:SS',\n...     min_captured_at='YYYY-MM-DD HH:MM:SS',\n...     image_type='pano',\n...     org_id='ORG_ID'\n... )\n")),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfaceset_access_tokentoken-str"},"mapillary.interface.set_access_token(token: str)"),(0,i.kt)("p",{parentName:"li"},"A function allowing the user to set an access token for the session, which they can create at\n",(0,i.kt)("a",{parentName:"p",href:"https://www.mapillary.com/dashboard/developers"},"https://www.mapillary.com/dashboard/developers"),". Takes token as an argument and sets a global\nvariable used by other functions making API requests. For more information what the details\nof authentication, please check out the blog post at Mapillary.\n",(0,i.kt)("a",{parentName:"p",href:"https://blog.mapillary.com/update/2021/06/23/getting-started-with-the-new-mapillary-api-v4.html"},"https://blog.mapillary.com/update/2021/06/23/getting-started-with-the-new-mapillary-api-v4.html"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"token")," (",(0,i.kt)("em",{parentName:"p"},"str"),") \u2013 The token itself that would\nbe set and accessed globally. Must be obtained")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  None")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"None\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> mly.interface.set_access_token('CLIENT_TOKEN_HERE')\n")),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinterfacetraffic_signs_in_bboxbbox-dict-filter_values-list--none-filters-dict"},"mapillary.interface.traffic_signs_in_bbox(bbox: dict, filter_values: list = None, ","*","*","filters: dict)"),(0,i.kt)("p",{parentName:"li"},"Extracts traffic signs within a bounding box (bbox)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"bbox")," (",(0,i.kt)("em",{parentName:"p"},"dict"),") \u2013 bbox coordinates as the argument"),(0,i.kt)("p",{parentName:"li"},"Example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> {\n...     'west': 'BOUNDARY_FROM_WEST',\n...     'south': 'BOUNDARY_FROM_SOUTH',\n...     'east': 'BOUNDARY_FROM_EAST',\n...     'north': 'BOUNDARY_FROM_NORTH'\n... }\n")))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"filter_values")," (",(0,i.kt)("em",{parentName:"p"},"list"),") \u2013 a list of filter values supported by the API,"),(0,i.kt)("p",{parentName:"li"},"Example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> ['regulatory--advisory-maximum-speed-limit--g1', 'regulatory--atvs-permitted--g1']\n")))),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"filters")," (",(0,i.kt)("em",{parentName:"p"},"dict"),") \u2013 kwarg filters to be applied on the resulted GeoJSON"),(0,i.kt)("p",{parentName:"li"},"Chronological filters,"))),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  * *existed_at*: checks if a feature existed after a certain date depending on the time\n\n  it was first seen at.\n\n\n  * *existed_before*: filters out the features that existed after a given date\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  GeoJSON Object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"dict\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> mly.interface.set_access_token('MLY|XXX')\n>>> mly.interface.traffic_signs_in_bbox(\n...    bbox={\n...         'west': 'BOUNDARY_FROM_WEST',\n...         'south': 'BOUNDARY_FROM_SOUTH',\n...         'east': 'BOUNDARY_FROM_EAST',\n...         'north': 'BOUNDARY_FROM_NORTH'\n...    },\n...    filter_values=[\n...        'regulatory--advisory-maximum-speed-limit--g1',\n...        'regulatory--atvs-permitted--g1'\n...    ],\n...    existed_at='YYYY-MM-DD HH:MM:SS',\n...    existed_before='YYYY-MM-DD HH:MM:SS'\n... )\n")),(0,i.kt)("h2",{parentName:"li",id:"module-contents"},"Module contents"),(0,i.kt)("h3",{parentName:"li",id:"mapillaryinit"},"mapillary.",(0,i.kt)("strong",{parentName:"h3"},"init")),(0,i.kt)("p",{parentName:"li"},"This module imports the necessary parts of the SDK")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Copyright: (c) 2021 Facebook")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"License: MIT LICENSE"))))}N.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[314],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return c}});var i=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=i.createContext({}),s=function(e){var t=i.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=s(e.components);return i.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=s(a),c=n,f=u["".concat(o,".").concat(c)]||u[c]||d[c]||r;return a?i.createElement(f,l(l({ref:t},m),{},{components:a})):i.createElement(f,l({ref:t},m))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=u;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:n,l[1]=p;for(var s=2;s<r;s++)l[s]=a[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6819:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return m},default:function(){return u}});var i=a(7462),n=a(3366),r=(a(7294),a(3905)),l=["components"],p={"sidebar position":2},o=void 0,s={unversionedId:"mapillary.models.api/mapillary.models.api.entities",id:"mapillary.models.api/mapillary.models.api.entities",isDocsHomePage:!1,title:"mapillary.models.api.entities",description:"mapillary.models.api.entities",source:"@site/docs/mapillary.models.api/mapillary.models.api.entities.md",sourceDirName:"mapillary.models.api",slug:"/mapillary.models.api/mapillary.models.api.entities",permalink:"/mapillary-python-sdk/docs/mapillary.models.api/mapillary.models.api.entities",editUrl:"https://github.com/mapillary/mapillary-python-sdk/tree/main/docs/docs/mapillary.models.api/mapillary.models.api.entities.md",tags:[],version:"current",frontMatter:{"sidebar position":2},sidebar:"tutorialSidebar",previous:{title:"mapillary.controller.save",permalink:"/mapillary-python-sdk/docs/mapillary.controller/mapillary.controller.save"},next:{title:"mapillary.models.api",permalink:"/mapillary-python-sdk/docs/mapillary.models.api/mapillary.models.api"}},m=[{value:"mapillary.models.api.entities",id:"mapillarymodelsapientities",children:[]},{value:"class mapillary.models.api.entities.EntityAdapter()",id:"class-mapillarymodelsapientitiesentityadapter",children:[]}],d={toc:m};function u(e){var t=e.components,a=(0,n.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"mapillarymodelsapientities"},"mapillary.models.api.entities"),(0,r.kt)("p",null,"This module contains the Adapter design for the Entities API of Mapillary API v4."),(0,r.kt)("p",null,"For more information, please check out ",(0,r.kt)("a",{parentName:"p",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Copyright: (c) 2021 Facebook")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"License: MIT LICENSE")),(0,r.kt)("h3",{id:"class-mapillarymodelsapientitiesentityadapter"},"class mapillary.models.api.entities.EntityAdapter()"),(0,r.kt)("p",null,"Bases: ",(0,r.kt)("inlineCode",{parentName:"p"},"object")),(0,r.kt)("p",null,"Adapter model for dealing with the Entity API, through the DRY principle. The EntityAdapter\nclass can be instantiated in the controller modules, providing an abstraction layer that uses\nthe Client class, endpoints provided by the API v4 under /config/api/entities.py."),(0,r.kt)("p",null,"It performs parsing, handling of layers, properties, and fields to make it easier to\nwrite higher level logic for extracing information, and lets developers to focus only\non writing the high level business logic without having to repeat the process of parsing\nand using libraries such as mercantile, ast, and others to only then care about the\ninputs and the outputs"),(0,r.kt)("p",null,"Usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> import mapillary\n>>> from mapillary.models.api.entities import EntityAdapter\n>>> EntityAdapter().fetch_image(image_id='IMAGE_ID', fields=[\n...     'altitude', 'atomic_scale', 'geometry', 'width'\n... ])\n>>> EntityAdapter().fetch_map_feature(map_feature_id='MAP_FEATURE_ID', fields=[\n...         'first_seen_at', 'last_seen_at', 'geometry'\n...     ])\n")),(0,r.kt)("h4",{id:"fetch_detectionsidentity-int-id_type-bool--true-fields-optionallist--none"},"fetch_detections(identity: int, id_type: bool = True, fields: Optional","[list]"," = None)"),(0,r.kt)("p",null,"Fetches detections depending on the id, detections for either map_features or\nimages and the fields provided"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"identity")," (",(0,r.kt)("em",{parentName:"li"},"int"),") \u2013 The id to extract for")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"* **id_type** (*bool*) \u2013 Either True(id is for image), or False(id is for map_feature),\ndefaults to True\n\n\n* **fields** (*list*) \u2013 The fields to extract properties for, defaults to []\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  The fetched GeoJSON"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Return type")),(0,r.kt)("p",{parentName:"li"},"  dict"))),(0,r.kt)("h4",{id:"fetch_imageimage_id-unionint-str-fields-optionallist--none"},"fetch_image(image_id: Union","[int, str]",", fields: Optional","[list]"," = None)"),(0,r.kt)("p",null,"Fetches images depending on the image_id and the fields provided"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"image_id")," (",(0,r.kt)("em",{parentName:"li"},"int"),") \u2013 The image_id to extract for")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"* **fields** (*list*) \u2013 The fields to extract properties for, defaults to []\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  The fetched GeoJSON"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Return type")),(0,r.kt)("p",{parentName:"li"},"  dict"))),(0,r.kt)("h4",{id:"fetch_map_featuremap_feature_id-unionint-str-fields-optionallist--none"},"fetch_map_feature(map_feature_id: Union","[int, str]",", fields: Optional","[list]"," = None)"),(0,r.kt)("p",null,"Fetches map features depending on the map_feature_id and the fields provided"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"map_feature_id")," (",(0,r.kt)("em",{parentName:"li"},"int"),") \u2013 The map_feature_id to extract for")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"* **fields** (*list*) \u2013 The fields to extract properties for, defaults to []\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  The fetched GeoJSON"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Return type")),(0,r.kt)("p",{parentName:"li"},"  dict"))),(0,r.kt)("h4",{id:"is_image_ididentity-int-fields-optionallist--none"},"is_image_id(identity: int, fields: Optional","[list]"," = None)"),(0,r.kt)("p",null,"Determines whether the given id is an image_id or a map_feature_id"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"identity")," (",(0,r.kt)("em",{parentName:"li"},"int"),") \u2013 The ID given to test")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"* **fields** (*list*) \u2013 The fields to extract properties for, defaults to []\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Returns")),(0,r.kt)("p",{parentName:"li"},"  True if id is image, else False"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Return type")),(0,r.kt)("p",{parentName:"li"},"  bool"))))}u.isMDXComponent=!0}}]);
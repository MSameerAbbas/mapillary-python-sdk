"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[810],{3905:function(t,e,a){a.d(e,{Zo:function(){return c},kt:function(){return u}});var i=a(7294);function o(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,i)}return a}function n(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){o(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function r(t,e){if(null==t)return{};var a,i,o=function(t,e){if(null==t)return{};var a,i,o={},l=Object.keys(t);for(i=0;i<l.length;i++)a=l[i],e.indexOf(a)>=0||(o[a]=t[a]);return o}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(i=0;i<l.length;i++)a=l[i],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(o[a]=t[a])}return o}var s=i.createContext({}),p=function(t){var e=i.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):n(n({},e),t)),a},c=function(t){var e=p(t.components);return i.createElement(s.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},f=i.forwardRef((function(t,e){var a=t.components,o=t.mdxType,l=t.originalType,s=t.parentName,c=r(t,["components","mdxType","originalType","parentName"]),f=p(a),u=o,k=f["".concat(s,".").concat(u)]||f[u]||m[u]||l;return a?i.createElement(k,n(n({ref:e},c),{},{components:a})):i.createElement(k,n({ref:e},c))}));function u(t,e){var a=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var l=a.length,n=new Array(l);n[0]=f;var r={};for(var s in e)hasOwnProperty.call(e,s)&&(r[s]=e[s]);r.originalType=t,r.mdxType="string"==typeof t?t:o,n[1]=r;for(var p=2;p<l;p++)n[p]=a[p];return i.createElement.apply(null,n)}return i.createElement.apply(null,a)}f.displayName="MDXCreateElement"},6549:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return f}});var i=a(7462),o=a(3366),l=(a(7294),a(3905)),n=["components"],r={"sidebar position":4},s=void 0,p={unversionedId:"mapillary.config.api/mapillary.config.api.vector_tiles",id:"mapillary.config.api/mapillary.config.api.vector_tiles",isDocsHomePage:!1,title:"mapillary.config.api.vector_tiles",description:"mapillary.config.api.vector_tiles",source:"@site/docs/mapillary.config.api/mapillary.config.api.vector_tiles.md",sourceDirName:"mapillary.config.api",slug:"/mapillary.config.api/mapillary.config.api.vector_tiles",permalink:"/mapillary-python-sdk/docs/mapillary.config.api/mapillary.config.api.vector_tiles",editUrl:"https://github.com/mapillary/mapillary-python-sdk/tree/main/docs/docs/mapillary.config.api/mapillary.config.api.vector_tiles.md",tags:[],version:"current",frontMatter:{"sidebar position":4},sidebar:"tutorialSidebar",previous:{title:"mapillary.config.api",permalink:"/mapillary-python-sdk/docs/mapillary.config.api/mapillary.config.api"},next:{title:"mapillary.config",permalink:"/mapillary-python-sdk/docs/mapillary.config/mapillary.config"}},c=[{value:"mapillary.config.api.vector_tiles",id:"mapillaryconfigapivector_tiles",children:[]},{value:"class mapillary.config.api.vector_tiles.VectorTiles()",id:"class-mapillaryconfigapivector_tilesvectortiles",children:[]},{value:"Module contents",id:"module-contents",children:[]}],m={toc:c};function f(t){var e=t.components,a=(0,o.Z)(t,n);return(0,l.kt)("wrapper",(0,i.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"mapillaryconfigapivector_tiles"},"mapillary.config.api.vector_tiles"),(0,l.kt)("p",null,"This module contains the class implementation of the VectorTile functionalities for the Vector Tile\naspect of the API v4 of Mapillary."),(0,l.kt)("p",null,"For more information, please check out ",(0,l.kt)("a",{parentName:"p",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Copyright: (c) 2021 Facebook")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"License: MIT LICENSE")),(0,l.kt)("h3",{id:"class-mapillaryconfigapivector_tilesvectortiles"},"class mapillary.config.api.vector_tiles.VectorTiles()"),(0,l.kt)("p",null,"Bases: ",(0,l.kt)("inlineCode",{parentName:"p"},"object")),(0,l.kt)("p",null,"Vector tiles provide an easy way to visualize vast amounts of data. Mapillary APIs are heavily\nbased on vector tiles to provide the developers with flexibility to programmatically interact\nwith the data they contain in custom ways. Vector tiles support filtering and querying rendered\nfeatures. Mapillary vector tiles follow the Mapbox Tile Specification,\n",(0,l.kt)("a",{parentName:"p",href:"https://docs.mapbox.com/vector-tiles/specification/"},"https://docs.mapbox.com/vector-tiles/specification/")),(0,l.kt)("h4",{id:"static-get_computed_image_layerx-float-y-float-z-float"},"static get_computed_image_layer(x: float, y: float, z: float)"),(0,l.kt)("p",null,"Contain positions of images and sequences with original geometries (computed) for the\nlayer \u2018image\u2019"),(0,l.kt)("p",null,"This layer offers,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"zoom: 14")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"geometry: Point")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"data source: images")),(0,l.kt)("p",null,"With the following properties,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"captured_at, int, timestamp in ms since epoch")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"compass_angle, int, the compass angle of the image")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"id, int, ID of the image")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"sequence_id, string, ID of the sequence this image belongs to")),(0,l.kt)("ol",{start:5},(0,l.kt)("li",{parentName:"ol"},"organization_id, int, ID of the organization this image belongs to. It can be absent")),(0,l.kt)("ol",{start:6},(0,l.kt)("li",{parentName:"ol"},"is_pano, bool, if it is a panoramic image")),(0,l.kt)("h4",{id:"static-get_computed_overview_layerx-float-y-float-z-float"},"static get_computed_overview_layer(x: float, y: float, z: float)"),(0,l.kt)("p",null,"Contain positions of images and sequences with original geometries\n(computed) for the layer \u2018overview\u2019"),(0,l.kt)("p",null,"This layer offers,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"zoom: 0 - 5 (inclusive)")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"geometry: Point")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"data source: images")),(0,l.kt)("p",null,"With the following properties,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"captured_at, int, timestamp in ms since epoch")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"id, int, ID of the image")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"sequence_id, string, ID of the sequence this image belongs to")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"is_pano, bool, if it is a panoramic image")),(0,l.kt)("h4",{id:"static-get_computed_sequence_layerx-float-y-float-z-float"},"static get_computed_sequence_layer(x: float, y: float, z: float)"),(0,l.kt)("p",null,"Contain positions of images and sequences with original geometries (computed) for the\nlayer \u2018sequence\u2019"),(0,l.kt)("p",null,"This layer offers,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"zoom: 6 - 14 (inclusive)")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"geometry: LineString")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"data source: images captured in a single collection, sorted by captured_at")),(0,l.kt)("p",null,"With the following properties,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"captured_at, int, timestamp in ms since epoch")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"id, string, ID  of the sequence (the legacy sequence key)")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"image_id, int, ID of the \u2018best\u2019 (first) image representing the sequence")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"organization_id, int, ID of the organization this image belongs to. It can be absent")),(0,l.kt)("ol",{start:5},(0,l.kt)("li",{parentName:"ol"},"is_pano, bool, if it is a panoramic sequence")),(0,l.kt)("h4",{id:"static-get_image_layerx-float-y-float-z-float"},"static get_image_layer(x: float, y: float, z: float)"),(0,l.kt)("p",null,"Contain positions of images and sequences with original geometries (not computed) for the\nlayer \u2018image\u2019"),(0,l.kt)("p",null,"This layer offers,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"zoom: 14")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"geometry: Point")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"data source: images")),(0,l.kt)("p",null,"With the following properties,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"captured_at, int, timestamp in ms since epoch")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"compass_angle, int, the compass angle of the image")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"id, int, ID of the image")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"sequence_id, string, ID of the sequence this image belongs to")),(0,l.kt)("ol",{start:5},(0,l.kt)("li",{parentName:"ol"},"organization_id, int, ID of the organization this image belongs to. It can be absent")),(0,l.kt)("ol",{start:6},(0,l.kt)("li",{parentName:"ol"},"is_pano, bool, if it is a panoramic image")),(0,l.kt)("h4",{id:"static-get_map_feature_pointx-float-y-float-z-float"},"static get_map_feature_point(x: float, y: float, z: float)"),(0,l.kt)("p",null,"These tiles represent positions of map features which are detected on the Mapillary platform\nand are not traffic signs."),(0,l.kt)("p",null,"This layer offers,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"zoom: 14")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"geometry: Point")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"data source: map features")),(0,l.kt)("p",null,"With the following resultant properties,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"id, int, ID of the image")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"value, string, name of the class which this object represent")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"first_seen_at, int, timestamp in ms since epoch, capture time of the earliest image on"),(0,l.kt)("p",{parentName:"li"},"which the detection contribute to this map feature"))),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"last_seen_at, int, timestamp in ms since epoch, capture time of the latest image on which"),(0,l.kt)("p",{parentName:"li"},"the detection contribute to this map feature"))),(0,l.kt)("h4",{id:"static-get_map_feature_traffic_signx-float-y-float-z-float"},"static get_map_feature_traffic_sign(x: float, y: float, z: float)"),(0,l.kt)("p",null,"These tiles represent positions of map features which are detected on the Mapillary\nplatform and are traffic signs."),(0,l.kt)("p",null,"The tile metadata is exactly the same as Map feature tiles, points, except that the\nlayer name is traffic_sign."),(0,l.kt)("p",null,"This layer offers,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"zoom: 14")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"geometry: Point")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"data source: map features")),(0,l.kt)("p",null,"With the following properties,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"id, int, ID of the image")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"value, string, name of the class which this object represent")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"first_seen_at, int, timestamp in ms since epoch, capture time of the earliest image on"),(0,l.kt)("p",{parentName:"li"},"which the detection contribute to this map feature"))),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"last_seen_at, int, timestamp in ms since epoch, capture time of the latest image on"),(0,l.kt)("p",{parentName:"li"},"which the detection contribute to this map feature"))),(0,l.kt)("h4",{id:"static-get_overview_layerx-float-y-float-z-float"},"static get_overview_layer(x: float, y: float, z: float)"),(0,l.kt)("p",null,"Contain positions of images and sequences with original\ngeometries (not computed) for the layer \u2018overview\u2019"),(0,l.kt)("p",null,"This layer offers,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"zoom: 0 - 5 (inclusive)")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"geometry: Point")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"data source: images")),(0,l.kt)("p",null,"With the following properties,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"captured_at, int, timestamp in ms since epoch")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"id, int, ID of the image")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"sequence_id, string, ID of the sequence this image belongs to")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"is_pano, bool, if it is a panoramic image")),(0,l.kt)("h4",{id:"static-get_sequence_layerx-float-y-float-z-float"},"static get_sequence_layer(x: float, y: float, z: float)"),(0,l.kt)("p",null,"Contain positions of images and sequences with original geometries (not computed) for the\nlayer \u2018sequence\u2019"),(0,l.kt)("p",null,"This layer offers,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"zoom: 6 - 14 (inclusive)")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"geometry: LineString")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"data source: images captured in a single collection, sorted by captured_at")),(0,l.kt)("p",null,"With the following properties,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"captured_at, int, timestamp in ms since epoch")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"id, string, ID  of the sequence (the legacy sequence key)")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"image_id, int, ID of the \u2018best\u2019 (first) image representing the sequence")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"organization_id, int, ID of the organization this image belongs to. It can be absent")),(0,l.kt)("ol",{start:5},(0,l.kt)("li",{parentName:"ol"},"is_pano, bool, if it is a panoramic sequence")),(0,l.kt)("h2",{id:"module-contents"},"Module contents"),(0,l.kt)("p",null,"mapillary.config.api.",(0,l.kt)("strong",{parentName:"p"},"init")),(0,l.kt)("p",null,"This package contains all the API v4 endpoints provided with the Mapillary Python SDK."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Copyright: (c) 2021 Facebook")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"License: MIT LICENSE")))}f.isMDXComponent=!0}}]);
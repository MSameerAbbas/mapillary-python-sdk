"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[190],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var l=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,l)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,l,a=function(e,t){if(null==e)return{};var r,l,a={},n=Object.keys(e);for(l=0;l<n.length;l++)r=n[l],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(l=0;l<n.length;l++)r=n[l],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=l.createContext({}),c=function(e){var t=l.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=c(e.components);return l.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},m=l.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=c(r),f=a,y=m["".concat(p,".").concat(f)]||m[f]||u[f]||n;return r?l.createElement(y,o(o({ref:t},s),{},{components:r})):l.createElement(y,o({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,o=new Array(n);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<n;c++)o[c]=r[c];return l.createElement.apply(null,o)}return l.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5901:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>o,default:()=>s,frontMatter:()=>n,metadata:()=>i,toc:()=>p});var l=r(7462),a=(r(7294),r(3905));const n={"sidebar position":3},o=void 0,i={unversionedId:"mapillary.controller/mapillary.controller.feature",id:"mapillary.controller/mapillary.controller.feature",isDocsHomePage:!1,title:"mapillary.controller.feature",description:"mapillary.controllers.feature",source:"@site/docs/mapillary.controller/mapillary.controller.feature.md",sourceDirName:"mapillary.controller",slug:"/mapillary.controller/mapillary.controller.feature",permalink:"/mapillary-python-sdk/docs/mapillary.controller/mapillary.controller.feature",editUrl:"https://github.com/mapillary/mapillary-python-sdk/tree/main/docs/docs/mapillary.controller/mapillary.controller.feature.md",tags:[],version:"current",frontMatter:{"sidebar position":3},sidebar:"tutorialSidebar",previous:{title:"mapillary.controller.detection",permalink:"/mapillary-python-sdk/docs/mapillary.controller/mapillary.controller.detection"},next:{title:"mapillary.controller.image",permalink:"/mapillary-python-sdk/docs/mapillary.controller/mapillary.controller.image"}},p=[{value:"mapillary.controllers.feature",id:"mapillarycontrollersfeature",children:[]},{value:"mapillary.controller.feature.get_feature_from_key_controller(key: int, fields: list)",id:"mapillarycontrollerfeatureget_feature_from_key_controllerkey-int-fields-list",children:[]},{value:"mapillary.controller.feature.get_map_features_in_bbox_controller(bbox: dict, filter_values: list, filters: dict, layer: str = &#39;points&#39;)",id:"mapillarycontrollerfeatureget_map_features_in_bbox_controllerbbox-dict-filter_values-list-filters-dict-layer-str--points",children:[]}],c={toc:p};function s(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,l.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"mapillarycontrollersfeature"},"mapillary.controllers.feature"),(0,a.kt)("p",null,"This module implements the feature extraction business logic functionalities of the Mapillary\nPython SDK."),(0,a.kt)("p",null,"For more information, please check out ",(0,a.kt)("a",{parentName:"p",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Copyright: (c) 2021 Facebook")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"License: MIT LICENSE")),(0,a.kt)("h3",{id:"mapillarycontrollerfeatureget_feature_from_key_controllerkey-int-fields-list"},"mapillary.controller.feature.get_feature_from_key_controller(key: int, fields: list)"),(0,a.kt)("p",null,"A controller for getting properties of a certain image given the image key and\nthe list of fields/properties to be returned"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"key")," (",(0,a.kt)("em",{parentName:"li"},"int"),") \u2013 The image key")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"* **fields** (*list*) \u2013 List of possible fields\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("p",{parentName:"li"},"  The requested feature properties in GeoJSON format"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Return type")),(0,a.kt)("p",{parentName:"li"},"  str"))),(0,a.kt)("h3",{id:"mapillarycontrollerfeatureget_map_features_in_bbox_controllerbbox-dict-filter_values-list-filters-dict-layer-str--points"},"mapillary.controller.feature.get_map_features_in_bbox_controller(bbox: dict, filter_values: list, filters: dict, layer: str = 'points')"),(0,a.kt)("p",null,"For extracting either map feature points or traffic signs within a bounding box"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Parameters")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"bbox")," (",(0,a.kt)("em",{parentName:"li"},"dict"),") \u2013 Bounding box coordinates as argument")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"* **layer** (*str*) \u2013 \u2018points\u2019 or \u2018traffic_signs\u2019\n\n\n* **filter_values** (*list*) \u2013 a list of filter values supported by the API.\n\n\n* **filters** (*dict*) \u2013 Chronological filters\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("p",{parentName:"li"},"  GeoJSON"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Return type")),(0,a.kt)("p",{parentName:"li"},"  str"))))}s.isMDXComponent=!0}}]);
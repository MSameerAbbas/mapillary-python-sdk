"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4474],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>u});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(i),u=a,g=d["".concat(s,".").concat(u)]||d[u]||m[u]||r;return i?n.createElement(g,l(l({ref:t},c),{},{components:i})):n.createElement(g,l({ref:t},c))}));function u(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=i[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}d.displayName="MDXCreateElement"},7861:(e,t,i)=>{i.r(t),i.d(t,{contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var n=i(7462),a=(i(7294),i(3905));const r={"sidebar position":2},l=void 0,o={unversionedId:"mapillary.config.api/mapillary.config.api.entities",id:"mapillary.config.api/mapillary.config.api.entities",isDocsHomePage:!1,title:"mapillary.config.api.entities",description:"mapillary.config.api.entities",source:"@site/docs/mapillary.config.api/mapillary.config.api.entities.md",sourceDirName:"mapillary.config.api",slug:"/mapillary.config.api/mapillary.config.api.entities",permalink:"/mapillary-python-sdk/docs/mapillary.config.api/mapillary.config.api.entities",editUrl:"https://github.com/mapillary/mapillary-python-sdk/tree/main/docs/docs/mapillary.config.api/mapillary.config.api.entities.md",tags:[],version:"current",frontMatter:{"sidebar position":2},sidebar:"tutorialSidebar",previous:{title:"Table Of Contents",permalink:"/mapillary-python-sdk/docs/Table Of Contents"},next:{title:"mapillary.config.api.general",permalink:"/mapillary-python-sdk/docs/mapillary.config.api/mapillary.config.api.general"}},s=[{value:"mapillary.config.api.entities",id:"mapillaryconfigapientities",children:[]},{value:"class mapillary.config.api.entities.Entities()",id:"class-mapillaryconfigapientitiesentities",children:[]}],p={toc:s};function c(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"mapillaryconfigapientities"},"mapillary.config.api.entities"),(0,a.kt)("p",null,"This module contains the class implementation of the Entities API endpoints\nas string, for the entity API endpoint aspect of the API v4 of Mapillary."),(0,a.kt)("p",null,"For more information, please check out ",(0,a.kt)("a",{parentName:"p",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Copyright: (c) 2021 Facebook")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"License: MIT LICENSE")),(0,a.kt)("h3",{id:"class-mapillaryconfigapientitiesentities"},"class mapillary.config.api.entities.Entities()"),(0,a.kt)("p",null,"Bases: ",(0,a.kt)("inlineCode",{parentName:"p"},"object")),(0,a.kt)("p",null,"Each API call requires specifying the fields of the Entity you\u2019re interested in explicitly.\nA sample image by ID request which returns the id and a computed geometry could look as\nbelow. For each entity available fields are listed in the relevant sections. All IDs are\nunique and the underlying metadata for each entity is accessible at\n",(0,a.kt)("a",{parentName:"p",href:"https://graph.mapillary.com/:id?fields=A,B,C"},"https://graph.mapillary.com/:id?fields=A,B,C"),". The responses are uniform and always return\na single object, unless otherwise stated (collection endpoints). All collection endpoint\nmetadata are wrapped in a {\u201cdata\u201d: ","[ {\u2026}, \u2026]","} JSON object."),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ GET \'https://graph.mapillary.com/$IMAGE_ID?access_token=TOKEN&fields=id,computed_geometry\'\n... {\n...     "id": "$IMAGE_ID",\n...     "computed_geometry": {\n...         "type": "Point",\n...         "coordinates": [0, 0]\n...     }\n... }\n')),(0,a.kt)("h4",{id:"static-get_detection_with_image_idimage_id-str-fields-list"},"static get_detection_with_image_id(image_id: str, fields: list)"),(0,a.kt)("p",null,"Represent an object detected in a single image. For convenience\nthis version of the API serves detections as collections. They can be\nrequested as a collection on the resource (e.g. image) they contribute\nor belong to."),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">>> 'https://graph.mapillary.com/:image_id/detections'\n>>> # detections in the image with ID image_id\n")),(0,a.kt)("p",null,"Fields:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"1. created_at - timestamp, when was this detection created\n2. geometry - string, base64 encoded polygon\n3. image - object, image the detection belongs to\n4. value - string, what kind of object the detection represents\n")),(0,a.kt)("h4",{id:"static-get_detection_with_image_id_fields"},"static get_detection_with_image_id_fields()"),(0,a.kt)("p",null,"Gets list of possible detections for image ids"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("p",{parentName:"li"},"  Possible detection parameters"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Return type")),(0,a.kt)("p",{parentName:"li"},"  list"))),(0,a.kt)("h4",{id:"static-get_detection_with_map_feature_idmap_feature_id-str-fields-list"},"static get_detection_with_map_feature_id(map_feature_id: str, fields: list)"),(0,a.kt)("p",null,"Represent an object detected in a single image. For convenience\nthis version of the API serves detections as collections. They can be\nrequested as a collection on the resource (e.g. map feature) they\ncontribute or belong to."),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">>> 'https://graph.mapillary.com/:map_feature_id/detections'\n>>> # detections in the image with ID map_feature_id\n")),(0,a.kt)("p",null,"Fields:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"1. created_at - timestamp, when was this detection created\n2. geometry - string, base64 encoded polygon\n3. image - object, image the detection belongs to\n4. value - string, what kind of object the detection represents\n")),(0,a.kt)("h4",{id:"static-get_detection_with_map_feature_id_fields"},"static get_detection_with_map_feature_id_fields()"),(0,a.kt)("p",null,"Gets list of possible field parameters for map features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("p",{parentName:"li"},"  Map feature detection fields"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Return type")),(0,a.kt)("p",{parentName:"li"},"  list"))),(0,a.kt)("h4",{id:"static-get_imageimage_id-str-fields-list"},"static get_image(image_id: str, fields: list)"),(0,a.kt)("p",null,"Represents the metadata of the image on the Mapillary platform with\nthe following properties."),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">>> 'https://graph.mapillary.com/:image_id' # endpoint\n")),(0,a.kt)("p",null,"Fields:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"1. altitude - float, original altitude from Exif\n2. atomic_scale - float, scale of the SfM reconstruction around the image\n3. camera_parameters - array of float, intrinsic camera parameters\n4. camera_type - enum, type of camera projection (perspective, fisheye, or spherical)\n5. captured_at - timestamp, capture time\n6. compass_angle - float, original compass angle of the image\n7. computed_altitude - float, altitude after running image processing\n8. computed_compass_angle - float, compass angle after running image processing\n9. computed_geometry - GeoJSON Point, location after running image processing\n10. computed_rotation - enum, corrected orientation of the image\n11. creator - the username and user ID who owns and uploaded the image\n12. exif_orientation - enum, orientation of the camera as given by the exif tag\n    (see: https://sylvana.net/jpegcrop/exif_orientation.html)\n13. geometry - GeoJSON Point geometry\n14. height - int, height of the original image uploaded\n15. make - string, the manufacturer name of the camera device\n16. model - string, the model or product series name of the camera device\n17. thumb_256_url - string, URL to the 256px wide thumbnail\n18. thumb_1024_url - string, URL to the 1024px wide thumbnail\n19. thumb_2048_url - string, URL to the 2048px wide thumbnail\n20. thumb_original_url - string, URL to the original wide thumbnail\n21. merge_cc - int, id of the connected component of images that were aligned together\n22. mesh - { id: string, url: string } - URL to the mesh\n23. quality_score - float, how good the image is (experimental)\n24. sequence - string, ID of the sequence\n25. sfm_cluster - { id: string, url: string } - URL to the point cloud\n26. width - int, width of the original image uploaded\n")),(0,a.kt)("h4",{id:"static-get_image_fields"},"static get_image_fields()"),(0,a.kt)("p",null,"Gets list of possible image fields"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("p",{parentName:"li"},"  Image field list"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Return type")),(0,a.kt)("p",{parentName:"li"},"  list"))),(0,a.kt)("h4",{id:"static-get_map_featuremap_feature_id-str-fields-list"},"static get_map_feature(map_feature_id: str, fields: list)"),(0,a.kt)("p",null,"These are objects with a location which have been derived from\nmultiple detections in multiple images."),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">>> 'https://graph.mapillary.com/:map_feature_id' # endpoint\n")),(0,a.kt)("p",null,"Fields:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"1. first_seen_at - timestamp, timestamp of the least recent detection\n    contributing to this feature\n2. last_seen_at - timestamp, timestamp of the most recent detection\n    contributing to this feature\n3. object_value - string, what kind of map feature it is\n4. object_type - string, either a traffic_sign or point\n5. geometry - GeoJSON Point geometry\n6. images - list of IDs, which images this map feature was derived from\n")),(0,a.kt)("h4",{id:"static-get_map_feature_fields"},"static get_map_feature_fields()"),(0,a.kt)("p",null,"Gets map feature fields"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("p",{parentName:"li"},"  Possible map feature fields"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Return type")),(0,a.kt)("p",{parentName:"li"},"  list"))),(0,a.kt)("h4",{id:"static-get_organization_idorganization_id-str-fields-list"},"static get_organization_id(organization_id: str, fields: list)"),(0,a.kt)("p",null,"Represents an organization which can own the imagery if users\nupload to it"),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">>> 'https://graph.mapillary.com/:organization_id' # endpoint\n")),(0,a.kt)("p",null,"Fields:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"1. slug - short name, used in URLs\n2. name - nice name\n3. description - public description of the organization\n")),(0,a.kt)("h4",{id:"static-get_organization_id_fields"},"static get_organization_id_fields()"),(0,a.kt)("p",null,"Gets list of possible organization id fields"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Returns")),(0,a.kt)("p",{parentName:"li"},"  Possible organization fields"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Return type")),(0,a.kt)("p",{parentName:"li"},"  list"))),(0,a.kt)("h4",{id:"static-get_sequencesequence_id-str"},"static get_sequence(sequence_id: str)"),(0,a.kt)("p",null,"Represents a sequence of Image IDs ordered by capture time"),(0,a.kt)("p",null,"Usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">>> 'https://graph.mapillary.com/image_ids?sequence_id=XXX'\n>>> # endpoint\n")),(0,a.kt)("p",null,"Fields:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"1. id - ID of the image belonging to the sequence\n")))}c.isMDXComponent=!0}}]);
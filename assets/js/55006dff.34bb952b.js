"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4171],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>y});var a=r(7294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function n(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,l=function(e,t){if(null==e)return{};var r,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var o=a.createContext({}),s=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):n(n({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,l=e.mdxType,i=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(r),y=l,d=m["".concat(o,".").concat(y)]||m[y]||u[y]||i;return r?a.createElement(d,n(n({ref:t},c),{},{components:r})):a.createElement(d,n({ref:t},c))}));function y(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=r.length,n=new Array(i);n[0]=m;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:l,n[1]=p;for(var s=2;s<i;s++)n[s]=r[s];return a.createElement.apply(null,n)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5250:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>n,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>o});var a=r(7462),l=(r(7294),r(3905));const i={"sidebar position":3},n=void 0,p={unversionedId:"mapillary.utils/mapillary.utils.extract",id:"mapillary.utils/mapillary.utils.extract",isDocsHomePage:!1,title:"mapillary.utils.extract",description:"mapillary.utils.extract",source:"@site/docs/mapillary.utils/mapillary.utils.extract.md",sourceDirName:"mapillary.utils",slug:"/mapillary.utils/mapillary.utils.extract",permalink:"/mapillary-python-sdk/docs/mapillary.utils/mapillary.utils.extract",editUrl:"https://github.com/mapillary/mapillary-python-sdk/tree/main/docs/docs/mapillary.utils/mapillary.utils.extract.md",tags:[],version:"current",frontMatter:{"sidebar position":3},sidebar:"tutorialSidebar",previous:{title:"mapillary.utils.auth",permalink:"/mapillary-python-sdk/docs/mapillary.utils/mapillary.utils.auth"},next:{title:"mapillary.utils.filter",permalink:"/mapillary-python-sdk/docs/mapillary.utils/mapillary.utils.filter"}},o=[{value:"mapillary.utils.extract",id:"mapillaryutilsextract",children:[]},{value:"mapillary.utils.extract.extract_properties(geojson: dict, properties: list)",id:"mapillaryutilsextractextract_propertiesgeojson-dict-properties-list",children:[]}],s={toc:o};function c(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,a.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"mapillaryutilsextract"},"mapillary.utils.extract"),(0,l.kt)("p",null,"This module deals with extracting multiple fields nested within a GeoJSON packet."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Copyright: (c) 2021 Facebook")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"License: MIT LICENSE")),(0,l.kt)("h3",{id:"mapillaryutilsextractextract_propertiesgeojson-dict-properties-list"},"mapillary.utils.extract.extract_properties(geojson: dict, properties: list)"),(0,l.kt)("p",null,"Extracts specific properties from a complete GeoJSON"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"geojson")," (",(0,l.kt)("em",{parentName:"li"},"dict"),") \u2013 GeoJSON object")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"* **properties** (*list*) \u2013 A list of properties to extract\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  The extracted fields as a dict"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  dict"))),(0,l.kt)("p",null,"Usage:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'>>> from utils.extract import extract_properties\n>>> extract_properties(geojson={"type":"FeatureCollection","features":[{"type":"Feature",\n... "geometry":{"type":"Point","coordinates":[-80.12991070747375,25.787652114106322]},\n... "properties":{"captured_at":1540386861135, "compass_angle":252.04260253906,"id":\n... 1274987139570038,"is_pano":\'False\',"sequence_id":"Vf8Iwxx5SemxI7_b_7J5Kw"}},{"type":\n... "Feature","geometry":{"type":"Point","coordinates":[-80.13223886489868,\n... 25.78756517066695]}, "properties":{"captured_at":1422989164000,"compass_angle":\n... 89.781,"id":169629268373019,"is_pano": "True","sequence_id":"dqjuprkOwUnmdEVt5gx-Iw"}}]}\n... , properties=[\'id\']) # id most likely exists\n')))}c.isMDXComponent=!0}}]);
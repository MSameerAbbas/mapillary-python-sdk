"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8710],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return k}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),s=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(a),k=r,N=d["".concat(o,".").concat(k)]||d[k]||c[k]||i;return a?n.createElement(N,p(p({ref:t},m),{},{components:a})):n.createElement(N,p({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,p=new Array(i);p[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,p[1]=l;for(var s=2;s<i;s++)p[s]=a[s];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3708:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return m},default:function(){return d}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),p=["components"],l={sidebar_position:6},o="mapillary.models package",s={unversionedId:"sdk/mapillary.models",id:"sdk/mapillary.models",isDocsHomePage:!1,title:"mapillary.models package",description:"## Subpackages",source:"@site/docs/sdk/mapillary.models.md",sourceDirName:"sdk",slug:"/sdk/mapillary.models",permalink:"/mapillary-python-sdk/docs/sdk/mapillary.models",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/sdk/mapillary.models.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"mapillary.models.api package",permalink:"/mapillary-python-sdk/docs/sdk/mapillary.models.api"},next:{title:"mapillary.utils package",permalink:"/mapillary-python-sdk/docs/sdk/mapillary.utils"}},m=[{value:"Subpackages",id:"subpackages",children:[]}],c={toc:m};function d(e){var t=e.components,a=(0,r.Z)(e,p);return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"mapillarymodels-package"},"mapillary.models package"),(0,i.kt)("h2",{id:"subpackages"},"Subpackages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"mapillary.models.api package"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"* Submodules\n\n\n* mapillary.models.api.entities module\n\n\n    * mapillary.models.api.entities\n\n\n* mapillary.models.api.vector_tiles module\n\n\n    * mapillary.models.api.vector_tiles\n\n\n* Module contents\n\n\n    * mapillary.models.api.__init__\n")),(0,i.kt)("h2",{parentName:"li",id:"submodules"},"Submodules"),(0,i.kt)("h2",{parentName:"li",id:"mapillarymodelsclient-module"},"mapillary.models.client module"),(0,i.kt)("h3",{parentName:"li",id:"mapillarymodelsclient"},"mapillary.models.client"),(0,i.kt)("p",{parentName:"li"},"This module contains aims to serve as a generalization for all API requests within the Mapillary\nPython SDK."),(0,i.kt)("h4",{parentName:"li",id:"over-authentication"},"Over Authentication"))),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"All requests against ",(0,i.kt)("a",{parentName:"p",href:"https://graph.mapillary.com"},"https://graph.mapillary.com")," must be authorized. They require a client or"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"user access tokens. Tokens can be sent in two ways,\n\n\n    1. Using ?access_token=XXX query parameters. This is a preferred method for interacting with\n\n    vector tiles. Using this method is STRONGLY discouraged for sending user access tokens\n\n\n    2. Using a header such as Authorization: OAuth XXX, where XXX is the token obtained either\n\n    through the OAuth flow that your application implements or a client token from\n    [https://mapillary.com/dashboard/developers](https://mapillary.com/dashboard/developers).\n")),(0,i.kt)("p",{parentName:"li"},"For more information, please check out ",(0,i.kt)("a",{parentName:"p",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/"),"."))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Copyright: (c) 2021 Facebook")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"License: MIT LICENSE"),(0,i.kt)("h3",{parentName:"li",id:"class-mapillarymodelsclientclient"},"class mapillary.models.client.Client()"),(0,i.kt)("p",{parentName:"li"},"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"object")),(0,i.kt)("p",{parentName:"li"},"Client setup for API communication."),(0,i.kt)("p",{parentName:"li"},"All requests for the Mapillary API v4 should go through this class"),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> client = Client(access_token='MLY|XXX')\n>>> # for entities endpoints\n>>> client.get(endpoint='endpoint specific path', entity=True, params={\n...     'fields': ['id', 'value']\n... })\n>>> # for tiles endpoint\n>>> client.get(endpoint='endpoint specific path', entity=False)\n")),(0,i.kt)("h4",{parentName:"li",id:"geturl-optionalstr--none-params-optionaldict--none"},"get(url: Optional","[str]"," = None, params: Optional","[dict]"," = None)"),(0,i.kt)("p",{parentName:"li"},"Make GET requests to both mapillary main endpoints")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"* **url** (*str*) \u2013 The specific path of the request URL\n\n\n* **params** (*dict*) \u2013 Query parameters to be attached to the URL (Dict)\n")),(0,i.kt)("h4",{parentName:"li",id:"static-get_token"},"static get_token()"),(0,i.kt)("p",{parentName:"li"},"Gets the access token")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"The access token\n")),(0,i.kt)("h4",{parentName:"li",id:"static-set_tokenaccess_token-str"},"static set_token(access_token: str)"),(0,i.kt)("p",{parentName:"li"},"Sets the access token")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"**access_token** \u2013 The access token to be set\n")),(0,i.kt)("h2",{parentName:"li",id:"mapillarymodelsexceptions-module"},"mapillary.models.exceptions module"),(0,i.kt)("h3",{parentName:"li",id:"mapillarymodelsexceptions"},"mapillary.models.exceptions"),(0,i.kt)("p",{parentName:"li"},"This module contains the set of Mapillary Exceptions used internally."),(0,i.kt)("p",{parentName:"li"},"For more information, please check out ",(0,i.kt)("a",{parentName:"p",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Copyright: (c) 2021 Facebook")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"License: MIT LICENSE"),(0,i.kt)("h3",{parentName:"li",id:"exception-mapillarymodelsexceptionsautherrormessage-str"},"exception mapillary.models.exceptions.AuthError(message: str)"),(0,i.kt)("p",{parentName:"li"},"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"mapillary.models.exceptions.MapillaryException")),(0,i.kt)("p",{parentName:"li"},"Raised when a function is called without having the access token set in\nset_access_token to access Mapillary\u2019s API, primarily used in mapillary.set_access_token")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Variables")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"**message** \u2013 The error message returned\n")),(0,i.kt)("h3",{parentName:"li",id:"exception-mapillarymodelsexceptionsinvalidfielderrorendpoint-str-field-list"},"exception mapillary.models.exceptions.InvalidFieldError(endpoint: str, field: list)"),(0,i.kt)("p",{parentName:"li"},"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"mapillary.models.exceptions.MapillaryException")),(0,i.kt)("p",{parentName:"li"},"Raised when an API endpoint is passed invalid field elements")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Variables")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"* **endpoint** \u2013 The API endpoint that was targeted\n\n\n* **field** \u2013 The invalid field that was passed\n")),(0,i.kt)("h3",{parentName:"li",id:"exception-mapillarymodelsexceptionsinvalidimagekeyerrorimage_id-unionint-str"},"exception mapillary.models.exceptions.InvalidImageKeyError(image_id: Union","[int, str]",")"),(0,i.kt)("p",{parentName:"li"},"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"mapillary.models.exceptions.MapillaryException")),(0,i.kt)("p",{parentName:"li"},"Raised when trying to retrieve an image thumbnail with an invalid image ID/key.\nPrimarily used with mapillary.image_thumbnail")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Variables")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"image_id")," \u2013 Image ID/key entered by the user")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"**image_id** \u2013 int\n")),(0,i.kt)("h3",{parentName:"li",id:"exception-mapillarymodelsexceptionsinvalidimageresolutionerrorresolution-int"},"exception mapillary.models.exceptions.InvalidImageResolutionError(resolution: int)"),(0,i.kt)("p",{parentName:"li"},"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"mapillary.models.exceptions.MapillaryException")),(0,i.kt)("p",{parentName:"li"},"Raised when trying to retrieve an image thumbnail with an invalid resolution/size."),(0,i.kt)("p",{parentName:"li"},"Primarily used with mapillary.image_thumbnail")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Variables")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"**resolution** \u2013 Image size entered by the user\n")),(0,i.kt)("h3",{parentName:"li",id:"exception-mapillarymodelsexceptionsinvalidkwargerrorfunc-str-key-str-value-str-options-list"},"exception mapillary.models.exceptions.InvalidKwargError(func: str, key: str, value: str, options: list)"),(0,i.kt)("p",{parentName:"li"},"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"mapillary.models.exceptions.MapillaryException")),(0,i.kt)("p",{parentName:"li"},"Raised when a function is called with the invalid keyword argument(s) that do not belong to the\nrequested API end call")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Variables")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"* **func** \u2013 The function that was called\n\n\n* **key** \u2013 The key that was passed\n\n\n* **value** \u2013 The value along with that key\n\n\n* **options** \u2013 List of possible keys that can be passed\n")),(0,i.kt)("h3",{parentName:"li",id:"exception-mapillarymodelsexceptionsinvalidoptionerrorparam-str-value-any-options-list"},"exception mapillary.models.exceptions.InvalidOptionError(param: str, value: any, options: list)"),(0,i.kt)("p",{parentName:"li"},"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"mapillary.models.exceptions.MapillaryException")),(0,i.kt)("p",{parentName:"li"},"Out of bound zoom error")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Variables")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"* **param** \u2013 The invalid param passed\n\n\n* **value** \u2013 The invalid value passed\n\n\n* **options** \u2013 The possible list of zoom values\n")),(0,i.kt)("h3",{parentName:"li",id:"exception-mapillarymodelsexceptionsinvalidtokenerrormessage-str-error_type-str-code-str-fbtrace_id-str"},"exception mapillary.models.exceptions.InvalidTokenError(message: str, error_type: str, code: str, fbtrace_id: str)"),(0,i.kt)("p",{parentName:"li"},"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"mapillary.models.exceptions.MapillaryException")),(0,i.kt)("p",{parentName:"li"},"Raised when an invalid token is given\nto access Mapillary\u2019s API, primarily used in mapillary.set_access_token")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Variables")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"* **message** \u2013 The error message returned\n\n\n* **error_type** \u2013 The type of error that occurred\n\n\n* **code** \u2013 The error code returned, most likely 190, \u201cAccess token has expired\u201d.\nSee [https://developers.facebook.com/docs/graph-api/using-graph-api/error-handling/](https://developers.facebook.com/docs/graph-api/using-graph-api/error-handling/)\nfor more information\n\n\n* **fbtrace_id** \u2013 A unique ID to track the issue/exception\n")),(0,i.kt)("h3",{parentName:"li",id:"exception-mapillarymodelsexceptionsmapillaryexception"},"exception mapillary.models.exceptions.MapillaryException()"),(0,i.kt)("p",{parentName:"li"},"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"Exception")),(0,i.kt)("p",{parentName:"li"},"Base class for exceptions in this module"),(0,i.kt)("h2",{parentName:"li",id:"mapillarymodelsgeojson-module"},"mapillary.models.geojson module"),(0,i.kt)("h3",{parentName:"li",id:"mapillarymodelsgeojson"},"mapillary.models.geojson"),(0,i.kt)("p",{parentName:"li"},"This module contains the class implementation for the geojson"),(0,i.kt)("p",{parentName:"li"},"For more information about the API, please check out\n",(0,i.kt)("a",{parentName:"p",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Copyright: (c) 2021 Facebook")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"License: MIT LICENSE"),(0,i.kt)("h3",{parentName:"li",id:"class-mapillarymodelsgeojsonfeaturefeature-dict"},"class mapillary.models.geojson.Feature(feature: dict)"),(0,i.kt)("p",{parentName:"li"},"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"object")),(0,i.kt)("p",{parentName:"li"},"Representation for a feature in a feature list")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"feature")," (",(0,i.kt)("em",{parentName:"p"},"dict"),") \u2013 The GeoJSON as the input")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Raises")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"InvalidOptionError")," \u2013 Raised when the geojson passed is the invalid type - not a dict")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  A class representation of the model")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"<class \u2018mapillary.models.geojson.Feature\u2019>\n")),(0,i.kt)("h4",{parentName:"li",id:"to_dict"},"to_dict()"),(0,i.kt)("p",{parentName:"li"},"Return the dictionary representation of the Feature"),(0,i.kt)("h3",{parentName:"li",id:"class-mapillarymodelsgeojsongeojsongeojson-dict"},"class mapillary.models.geojson.GeoJSON(geojson: dict)"),(0,i.kt)("p",{parentName:"li"},"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"object")),(0,i.kt)("p",{parentName:"li"},"Representation for a geojson")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"geojson")," (",(0,i.kt)("em",{parentName:"p"},"dict"),") \u2013 The GeoJSON as the input")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Raises")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"InvalidOptionError")," \u2013 Raised when the geojson passed is the invalid type - not a dict")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  A class representation of the model")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"<class \u2018mapillary.models.geojson.GeoJSON\u2019>\n")),(0,i.kt)("p",{parentName:"li"},"Usage:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},">>> import mapillary as mly\n>>> from models.geojson import GeoJSON\n>>> mly.interface.set_access_token('MLY|XXX')\n>>> data = mly.interface.get_image_close_to(longitude=31, latitude=31)\n>>> geojson = GeoJSON(geojson=data)\n>>> type(geojson)\n... <class 'mapillary.models.geojson.GeoJSON'>\n>>> type(geojson.type)\n... <class 'str'>\n>>> type(geojson.features)\n... <class 'list'>\n>>> type(geojson.features[0])\n... <class 'mapillary.models.geojson.Feature'>\n>>> type(geojson.features[0].type)\n... <class 'str'>\n>>> type(geojson.features[0].geometry)\n... <class 'mapillary.models.geojson.Geometry'>\n>>> type(geojson.features[0].geometry.type)\n... <class 'str'>\n>>> type(geojson.features[0].geometry.coordinates)\n... <class 'list'>\n>>> type(geojson.features[0].properties)\n... <class 'mapillary.models.geojson.Properties'>\n>>> type(geojson.features[0].properties.captured_at)\n... <class 'int'>\n>>> type(geojson.features[0].properties.is_pano)\n... <class 'str'>\n")),(0,i.kt)("h4",{parentName:"li",id:"append_featurefeature_inputs-dict"},"append_feature(feature_inputs: dict)"),(0,i.kt)("p",{parentName:"li"},"Given a feature dictionary, append it to the GeoJSON object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"feature_inputs")," (",(0,i.kt)("em",{parentName:"p"},"dict"),") \u2013 A feature as dict")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"None\n")),(0,i.kt)("h4",{parentName:"li",id:"append_featuresfeatures-list"},"append_features(features: list)"),(0,i.kt)("p",{parentName:"li"},"Given a feature list, append it to the GeoJSON object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"features")," (",(0,i.kt)("em",{parentName:"p"},"list"),") \u2013 A feature list")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"None\n")),(0,i.kt)("h4",{parentName:"li",id:"encode"},"encode()"),(0,i.kt)("p",{parentName:"li"},"Serializes the GeoJSON object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"Serialized GeoJSON\n")),(0,i.kt)("h4",{parentName:"li",id:"to_dict-1"},"to_dict()"),(0,i.kt)("p",{parentName:"li"},"Return the dict format representation of the GeoJSON"),(0,i.kt)("h3",{parentName:"li",id:"class-mapillarymodelsgeojsongeometrygeometry-dict"},"class mapillary.models.geojson.Geometry(geometry: dict)"),(0,i.kt)("p",{parentName:"li"},"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"object")),(0,i.kt)("p",{parentName:"li"},"Representation for the geometry in a GeoJSON")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"geometry")," (",(0,i.kt)("em",{parentName:"p"},"dict"),") \u2013 The geometry as the input")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Raises")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"InvalidOptionError")," \u2013 Raised when the geometry passed is the invalid type - not a dict")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  A class representation of the model")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"<class \u2018mapillary.models.geojson.Geometry\u2019>\n")),(0,i.kt)("h4",{parentName:"li",id:"to_dict-2"},"to_dict()"),(0,i.kt)("p",{parentName:"li"},"Return dictionary representation of the geometry"),(0,i.kt)("h3",{parentName:"li",id:"class-mapillarymodelsgeojsonpropertiesproperties-kwargs"},"class mapillary.models.geojson.Properties(","*","properties, ","*","*","kwargs)"),(0,i.kt)("p",{parentName:"li"},"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"object")),(0,i.kt)("p",{parentName:"li"},"Representation for the properties in a GeoJSON")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"properties")," (",(0,i.kt)("em",{parentName:"p"},"dict"),") \u2013 The properties as the input")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Raises")),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"InvalidOptionError")," \u2013 Raised when the geojson passed is the invalid type - not a dict")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",{parentName:"li"},"  A class representation of the model")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return type")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"<class \u2018mapillary.models.geojson.Properties\u2019>\n")),(0,i.kt)("h4",{parentName:"li",id:"to_dict-3"},"to_dict()"),(0,i.kt)("p",{parentName:"li"},"Return the dictionary representation of the Properties"),(0,i.kt)("h2",{parentName:"li",id:"module-contents"},"Module contents"),(0,i.kt)("h3",{parentName:"li",id:"mapillarymodelsinit"},"mapillary.models.",(0,i.kt)("strong",{parentName:"h3"},"init")),(0,i.kt)("p",{parentName:"li"},"This package contains the class representations of logic within the Mapillary Python SDK.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Copyright: (c) 2021 Facebook")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"License: MIT LICENSE"))))}d.isMDXComponent=!0}}]);
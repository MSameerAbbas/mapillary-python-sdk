"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3056],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var i=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function n(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,i,l=function(e,t){if(null==e)return{};var a,i,l={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=i.createContext({}),o=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):n(n({},t),e)),a},m=function(e){var t=o(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},k=i.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),k=o(a),c=l,y=k["".concat(s,".").concat(c)]||k[c]||u[c]||r;return a?i.createElement(y,n(n({ref:t},m),{},{components:a})):i.createElement(y,n({ref:t},m))}));function c(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,n=new Array(r);n[0]=k;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:l,n[1]=p;for(var o=2;o<r;o++)n[o]=a[o];return i.createElement.apply(null,n)}return i.createElement.apply(null,a)}k.displayName="MDXCreateElement"},3057:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>n,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var i=a(7462),l=(a(7294),a(3905));const r={"sidebar position":7},n=void 0,p={unversionedId:"mapillary.utils/mapillary.utils.verify",id:"mapillary.utils/mapillary.utils.verify",isDocsHomePage:!1,title:"mapillary.utils.verify",description:"mapillary.controller.rules.verify",source:"@site/docs/mapillary.utils/mapillary.utils.verify.md",sourceDirName:"mapillary.utils",slug:"/mapillary.utils/mapillary.utils.verify",permalink:"/mapillary-python-sdk/docs/mapillary.utils/mapillary.utils.verify",editUrl:"https://github.com/mapillary/mapillary-python-sdk/tree/main/docs/docs/mapillary.utils/mapillary.utils.verify.md",tags:[],version:"current",frontMatter:{"sidebar position":7},sidebar:"tutorialSidebar",previous:{title:"mapillary.utils.time",permalink:"/mapillary-python-sdk/docs/mapillary.utils/mapillary.utils.time"},next:{title:"mapillary.interface",permalink:"/mapillary-python-sdk/docs/mapillary/mapillary.interface"}},s=[{value:"mapillary.controller.rules.verify",id:"mapillarycontrollerrulesverify",children:[]},{value:"mapillary.utils.verify.bbox_validity_check(bbox)",id:"mapillaryutilsverifybbox_validity_checkbbox",children:[]},{value:"mapillary.utils.verify.check_file_name_validity(file_name: str)",id:"mapillaryutilsverifycheck_file_name_validityfile_name-str",children:[]},{value:"mapillary.utils.verify.image_bbox_check(kwargs: dict)",id:"mapillaryutilsverifyimage_bbox_checkkwargs-dict",children:[]},{value:"mapillary.utils.verify.image_check(kwargs)",id:"mapillaryutilsverifyimage_checkkwargs",children:[]},{value:"mapillary.utils.verify.international_dateline_check(bbox)",id:"mapillaryutilsverifyinternational_dateline_checkbbox",children:[]},{value:"mapillary.utils.verify.is_image_id(identity: int, fields: Optionallist = None)",id:"mapillaryutilsverifyis_image_ididentity-int-fields-optionallist--none",children:[]},{value:"mapillary.utils.verify.kwarg_check(kwargs: dict, options: list, callback: str)",id:"mapillaryutilsverifykwarg_checkkwargs-dict-options-list-callback-str",children:[]},{value:"mapillary.utils.verify.points_traffic_signs_check(kwargs: dict)",id:"mapillaryutilsverifypoints_traffic_signs_checkkwargs-dict",children:[]},{value:"mapillary.utils.verify.resolution_check(resolution: int)",id:"mapillaryutilsverifyresolution_checkresolution-int",children:[]},{value:"mapillary.utils.verify.sequence_bbox_check(kwargs: dict)",id:"mapillaryutilsverifysequence_bbox_checkkwargs-dict",children:[]},{value:"mapillary.utils.verify.valid_id(identity: int, image=True)",id:"mapillaryutilsverifyvalid_ididentity-int-imagetrue",children:[]},{value:"Module contents",id:"module-contents",children:[{value:"mapillary.utils.<strong>init</strong>",id:"mapillaryutilsinit",children:[]}]}],o={toc:s};function m(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,i.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"mapillarycontrollerrulesverify"},"mapillary.controller.rules.verify"),(0,l.kt)("p",null,"This module implements the verification of the filters or keys passed to each of the controllers\nunder ./controllers that implement the business logic functionalities of the Mapillary\nPython SDK."),(0,l.kt)("p",null,"For more information, please check out ",(0,l.kt)("a",{parentName:"p",href:"https://www.mapillary.com/developer/api-documentation/"},"https://www.mapillary.com/developer/api-documentation/")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Copyright: (c) 2021 Facebook")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"License: MIT LICENSE")),(0,l.kt)("h3",{id:"mapillaryutilsverifybbox_validity_checkbbox"},"mapillary.utils.verify.bbox_validity_check(bbox)"),(0,l.kt)("h3",{id:"mapillaryutilsverifycheck_file_name_validityfile_name-str"},"mapillary.utils.verify.check_file_name_validity(file_name: str)"),(0,l.kt)("p",null,"Checks if the file name is valid"),(0,l.kt)("p",null,"Valid file names are,"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Without extensions")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Without special characters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A-Z, a-z, 0-9, _, -")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"file_name")," (",(0,l.kt)("em",{parentName:"p"},"str"),") \u2013 The file name to be checked"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  True if the file name is valid, else False"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  bool"))),(0,l.kt)("h3",{id:"mapillaryutilsverifyimage_bbox_checkkwargs-dict"},"mapillary.utils.verify.image_bbox_check(kwargs: dict)"),(0,l.kt)("p",null,"Check if the right arguments have been provided for the image bounding box"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"kwargs")," (",(0,l.kt)("em",{parentName:"p"},"dict"),") \u2013 The dictionary parameters"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  A final dictionary with the kwargs"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  dict"))),(0,l.kt)("h3",{id:"mapillaryutilsverifyimage_checkkwargs"},"mapillary.utils.verify.image_check(kwargs)"),(0,l.kt)("p",null,"For image entities, check if the arguments provided fall in the right category"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"kwargs")," (",(0,l.kt)("em",{parentName:"p"},"dict"),") \u2013 A dictionary that contains the keyword key-value pair arguments"))),(0,l.kt)("h3",{id:"mapillaryutilsverifyinternational_dateline_checkbbox"},"mapillary.utils.verify.international_dateline_check(bbox)"),(0,l.kt)("h3",{id:"mapillaryutilsverifyis_image_ididentity-int-fields-optionallist--none"},"mapillary.utils.verify.is_image_id(identity: int, fields: Optional","[list]"," = None)"),(0,l.kt)("p",null,"Checks if the id is an image_id"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"identity")," (",(0,l.kt)("em",{parentName:"li"},"int"),") \u2013 The id to be checked")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"* **fields** (*list*) \u2013 The fields to be checked\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  True if the id is an image_id, else False"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  bool"))),(0,l.kt)("h3",{id:"mapillaryutilsverifykwarg_checkkwargs-dict-options-list-callback-str"},"mapillary.utils.verify.kwarg_check(kwargs: dict, options: list, callback: str)"),(0,l.kt)("p",null,"Checks for keyword arguments amongst the kwarg argument to fall into the options list"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"kwargs")," (",(0,l.kt)("em",{parentName:"li"},"dict"),") \u2013 A dictionary that contains the keyword key-value pair arguments")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"* **options** (*list*) \u2013 A list of possible arguments in kwargs\n\n\n* **callback** (*str*) \u2013 The function that called \u2018kwarg_check\u2019 in the case of an exception\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Raises")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"InvalidOptionError")," \u2013 Invalid option exception"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  A boolean, whether the kwargs are appropriate or not"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  bool"))),(0,l.kt)("h3",{id:"mapillaryutilsverifypoints_traffic_signs_checkkwargs-dict"},"mapillary.utils.verify.points_traffic_signs_check(kwargs: dict)"),(0,l.kt)("p",null,"Checks for traffic sign arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"kwargs")," (",(0,l.kt)("em",{parentName:"p"},"dict"),") \u2013 The parameters to be passed for filtering"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  A dictionary with all the options available specifically"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  dict"))),(0,l.kt)("h3",{id:"mapillaryutilsverifyresolution_checkresolution-int"},"mapillary.utils.verify.resolution_check(resolution: int)"),(0,l.kt)("p",null,"Checking for the proper thumbnail size of the argument"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"resolution")," (",(0,l.kt)("em",{parentName:"p"},"int"),") \u2013 The image size to fetch for"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Raises")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"InvalidOptionError")," \u2013 Invalid thumbnail size passed raises exception"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  A check if the size is correct"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  bool"))),(0,l.kt)("h3",{id:"mapillaryutilsverifysequence_bbox_checkkwargs-dict"},"mapillary.utils.verify.sequence_bbox_check(kwargs: dict)"),(0,l.kt)("p",null,"Checking of the sequence bounding box"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"kwargs")," (",(0,l.kt)("em",{parentName:"p"},"dict"),") \u2013 The final dictionary with the correct keys"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  A dictionary with all the options available specifically"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  dict"))),(0,l.kt)("h3",{id:"mapillaryutilsverifyvalid_ididentity-int-imagetrue"},"mapillary.utils.verify.valid_id(identity: int, image=True)"),(0,l.kt)("p",null,"Checks if a given id is valid as it is assumed. For example, is a given id expectedly an\nimage_id or not? Is the id expectedly a map_feature_id or not?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"identity")," (",(0,l.kt)("em",{parentName:"li"},"int"),") \u2013 The ID passed")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"* **image** (*bool*) \u2013 Is the passed id an image_id?\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Raises")),(0,l.kt)("p",{parentName:"li"},"  ",(0,l.kt)("strong",{parentName:"p"},"InvalidOptionError")," \u2013 Raised when invalid arguments are passed"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",{parentName:"li"},"  None"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Return type")),(0,l.kt)("p",{parentName:"li"},"  None"))),(0,l.kt)("h2",{id:"module-contents"},"Module contents"),(0,l.kt)("h3",{id:"mapillaryutilsinit"},"mapillary.utils.",(0,l.kt)("strong",{parentName:"h3"},"init")),(0,l.kt)("p",null,"This package contains all the internal utilities used within the Mapillary python SDK."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Copyright: (c) 2021 Facebook")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"License: MIT LICENSE")))}m.isMDXComponent=!0}}]);